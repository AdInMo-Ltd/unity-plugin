<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdinmoPlugin</name>
    </assembly>
    <members>
        <member name="T:Adinmo.AdinmoAudioIconController">
            <summary>
            Controller for the icon that shows an Audio item is playing
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoAudioIconController.ObjImgProgress">
            <summary>
            Image used to show progress in the audio playback
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoAudioIconController.StartPlaying(Adinmo.AdinmoAudioItem)">
            <summary>
            Starts playing an audio item
            </summary>
            <param name="item">The Audio Item to play</param>
        </member>
        <member name="M:Adinmo.AdinmoAudioIconController.IconClicked">
            <summary>
            Called to handle a click to the audio icon
            </summary>
        </member>
        <member name="T:Adinmo.AudioState">
            <summary>
             State of progress of an Audio item
            </summary>
        </member>
        <member name="F:Adinmo.AudioState.QUEUED">
            <summary>
            item has just been added to the pool, without any processing
            </summary>
        </member>
        <member name="F:Adinmo.AudioState.DOWNLOADING">
            <summary>
            attempting to attach to the audio stream
            </summary>
        </member>
        <member name="F:Adinmo.AudioState.DOWNLOADED">
            <summary>
            audio item has been downloaded, and is ready to play
            </summary>
        </member>
        <member name="F:Adinmo.AudioState.PLAYING">
            <summary>
            audio item is playing
            </summary>
        </member>
        <member name="F:Adinmo.AudioState.PAUSED">
            <summary>
            audio item has paused play
            </summary>
        </member>
        <member name="F:Adinmo.AudioState.STOPPED">
            <summary>
            audio item has stopped play
            </summary>
        </member>
        <member name="F:Adinmo.AudioState.FAILED">
            <summary>
            audio item failed to download or failed during play
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoAudioItem">
            <summary>
            Encapsulates an audio item in the item pool, and controls playing of that item
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoAudioItem.Length">
            <summary>
            The length of playback in seconds
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoAudioItem.#ctor(System.String,System.String,UnityEngine.GameObject,System.String,System.Single,System.Nullable{System.DateTime},System.Single,System.Single)">
            <summary>
            Creates a new Audio Item
            </summary>
            <param name="guid">Unique identifier for the media file in the pool</param>
            <param name="campaignGuid">Unique identifier for the campaign this media file is part of</param>
            <param name="parent">object to which to attach the source component</param>
            <param name="originalUrl">the url where the stream is located</param>
            <param name="lengthMS">the length of playback in seconds</param>
            <param name="expires">when the audio item will be deemed to old to play and discarded</param>
            <param name="minAudioSkipTime">the shortest length of time before the skip button appears</param>
            <param name="percentageAudioSkipTime">the shortest % of play time before the skip button appears</param>
        </member>
        <member name="M:Adinmo.AdinmoAudioItem.GetProgress">
            <summary>
            queries the relative progress of the playback
            </summary>
            <returns>the proportion of the playback that has completed</returns>
        </member>
        <member name="M:Adinmo.AdinmoAudioItem.DownLoad(System.String)">
            <summary>
            Download an audio file via a url
            </summary>
            <param name="url">the location of the audio file</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoAudioItem.IsPlaying">
            <summary>
            is the current item playing
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoAudioItem.Dispose">
            <summary>
            Dispose of the audio asset safely
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoDownloadState">
            <summary>
            The download state of a placement texture
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.NotStarted">
            <summary>
            item has just been added to the pool
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.Queued">
            <summary>
            item is queued for download
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.DownloadingHtml">
            <summary>
            item is downloading it's markup
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.DownloadedHtml">
            <summary>
            markup has been downloaded
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.Downloading">
            <summary>
            rendering the markup
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.Verifying">
            <summary>
            verifying the rendered markup hasn't been blocked
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.Downloaded">
            <summary>
            item is downloaded on a texture
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloadState.Failed">
            <summary>
            item failed during one of the above steps
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoBaseItem">
            <summary>
            The Base class of all media items that appear in the pools
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseItem.Guid">
            <summary>
            The guid unique to this image
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseItem.CampaignGuid">
            <summary>
            The guid unique to this campaign
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseItem.LinkURL">
            <summary>
            the url followed when the item is clicked
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseItem.sourceURL">
            <summary>
            the url that is the source of the item
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.Dispose">
            <summary>
            function called when item needs to be safely disposed
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.IncReference">
            <summary>
            function called when references to item have been increased
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.DecReferences">
            <summary>
            function called when referenced to item have decreased
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseItem.References">
            <summary>
            current number of references to an item
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.Setup(System.String,System.String,Adinmo.Flatbufs.MediaType)">
            <summary>
            Setup the base item
            </summary>
            <param name="guid">Guid associated with item</param>
            <param name="campaignGuid">The guid of the associated campaign</param>
            <param name="mediaType">The media type of the item</param>
        </member>
        <member name="P:Adinmo.AdinmoBaseItem.DownloadProgress">
            <summary>
            The download state of the placement texture
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseItem.MediaType">
             <summary>
             Type of placement texture being represented
             </summary>
            
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.Update">
            <summary>
            Update is called once per frame
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.CheckTimedOut">
            <summary>
            Check if the download has timed out
            </summary>
            <returns>Whether the download has timed out</returns>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.Download(System.String)">
            <summary>
            The download coroutine for the image
            </summary>
            <param name="url">The URL where to download the image</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.UpdateDownload">
            <summary>
            Progress checking routine for the download
            </summary>
            <returns>true if the download has finished processing</returns>
        </member>
        <member name="M:Adinmo.AdinmoBaseItem.ToString">
            <summary>
            A string representation of the placement image
            </summary>
            <returns>The string representation of the placement image {TextureType,GUID}</returns>
        </member>
        <member name="P:Adinmo.AdinmoBaseItem.Downloaded">
            <summary>
            Returns true or false whether than texture has been downloaded
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseItem.DownloadFailed">
            <summary>
            Returns true or false whether the texture download has failed
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseItem.LastDownloadStateChange">
            <summary>
            The time that the last downloadstate change occured
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoBaseRenderer">
            <summary>
            the base class for all the renderable items in the pool
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseRenderer.ImageConfig">
            <summary>
            The configuration definition class for this render item
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseRenderer.Guid">
            <summary>
            The primary reference key for this item
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseRenderer.CampaignGuid">
            <summary>
            The unique reference key for the campaign of which this item is a part
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseRenderer.CalculatedColor">
            <summary>
            The colour to use in the letterbox fill
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseRenderer.BorderColour">
            <summary>
            A complimentary colour that can be used on other attached objects 
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseRenderer.ColourString">
            <summary>
            a string representation of a fixed border colour
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseRenderer.Tex2D">
            <summary>
            The texture that will be attached to the placement to show the ad
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseRenderer.SourceWidth">
            <summary>
            The width of the source media
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseRenderer.SourceHeight">
            <summary>
            The height of the source media
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseRenderer.UseExtraBorder">
            <summary>
            Whether a glowing border will be drawn round the item to indicate clickability
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseRenderer.letterboxed">
            <summary>
            Whether a letterbox will be drawn round the item to adjust the aspect ratio of the source to meet the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseRenderer.backgroundSetting">
            <summary>
            How the placement deals with mismatched aspect ratio of source to placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseRenderer.IsAnimated">
            <summary>
            Whether the ad is animated
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseRenderer.Setup(Adinmo.AdinmoBaseItem)">
            <summary>
            Setting up the BaseRenderer
            </summary>
            <param name="baseItem">The core item to base this renderer around</param>
        </member>
        <member name="T:Adinmo.AdinmoBaseTexture">
            <summary>
            The download state of a placement texture
            </summary>
            <summary>
            The base class for all placement textures and their download task
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseTexture.Setup(System.String,System.String,System.String,System.String,Adinmo.Flatbufs.MediaType,System.Boolean)">
            <summary>
            Sets up properties common to all placement texture types
            </summary>
            <param name="guid">The guid unique to this image</param>
            <param name="campaignGuid">The guid unique to this campaign</param>
            <param name="colourStr">The border colour for the image</param>
            <param name="linkUrl">The url that will be followed in the case of a click</param>
            <param name="mediaType">The type of media being setup</param>
            <param name="wantsExtraBorder">Whether or not to allow extra space for a glow border</param>
            
        </member>
        <member name="P:Adinmo.AdinmoBaseTexture.Texture">
            <summary>
            The texture to be applied to the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseTexture.BorderColour">
            <summary>
            A complimentary colour that can be used on other attached objects 
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseTexture.ColourString">
            <summary>
            a string representation of a fixed border colour
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoBaseTexture.Cached">
            <summary>
            Whether the texture has been stored in the cache for later retrieval
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoBaseTexture.AspectRatio">
            <summary>
            Returns the aspect ratio
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoBaseTexture.Dispose">
            <summary>
            Disposing the key references for this item
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoChoiceDialogController">
            <summary>
            A controller for a dialog where you can chose from a range of placement images to show in the game
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoChoiceDialogController.buttons">
            <summary>
            An array of buttons on the dialog, one for each image that can be chosen
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoChoiceDialogController.Title">
            <summary>
            The text object to fill with the title message for the dialog
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoChoiceDialogController.buttonsLockedTime">
            <summary>
            The time after which the buttons will be enabled at the start to stop people selecting before an impression has been generated
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoChoiceDialogController.aspectRatio">
            <summary>
            The aspect ratio of the images on the buttons
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoChoiceDialogController.buttonsLocked">
            <summary>
            Whether the buttons are currently locked to prevent people selecting an image before an impression has been generated
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoChoiceDialogController.RandomImages">
            <summary>
            The list of randon images that have been selected for use on the buttons
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoChoiceDialogController.Update">
            <summary>
            Update is called once per frame
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoChoiceDialogController.Setup(Adinmo.AdinmoLocalizationEntry,UnityEngine.Sprite,UnityEngine.Sprite,UnityEngine.Font,UnityEngine.Color)">
            <summary>
            Sets up the dialog box with images for the user to pick, and applies the localised title
            </summary>
            <param name="locale">The localised text string for the title</param>
            <param name="backgroundSprite">What background image can be used for the dialog</param>
            <param name="buttonSprite">What background image to use on the sprites</param>
            <param name="font">What font to use for the title text</param>
            <param name="fontColour">What colour to use on the title text font</param>
        </member>
        <member name="M:Adinmo.AdinmoChoiceDialogController.AddRandomImage">
            <summary>
            Adds a random downloaded image selected from the image manager with the selected aspect ratio 
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoChoiceDialogController.onClickChoice">
            <summary>
            when the user has selected a button, find which image has been selected and return it to AdinmoManager
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoLocalizationEntry">
            <summary>
            A Wrapper for the localised text string for the title
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoLocalizationEntry.#ctor">
            <summary>
            A default initialiser for localization
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoLocalizationEntry.#ctor(System.String)">
            <summary>
            An initialiser for a localized string
            </summary>
            <param name="dialogTitleString">The localized stirng</param>
        </member>
        <member name="F:Adinmo.AdinmoLocalizationEntry.Name">
            <summary>
            The system language to localize against
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoLocalizationEntry.DialogTitleString">
            <summary>
            The title text for the popup choices dialog
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoDebugOverlay">
            <summary>
            A class for drawing a impression status bar above the placement image
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDebugOverlay.m_replace">
            <summary>
            the placement object
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDebugOverlay.m_backgroundLineRender">
            <summary>
            the green line renderer
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDebugOverlay.m_foregroundLineRender">
            <summary>
            the white line renderer
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDebugOverlay.m_foregroundLineObject">
            <summary>
            the white line child object
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDebugOverlay.m_backgroundLineObject">
            <summary>
             the green line child object
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDebugOverlay.Start">
            <summary>
            seting up, finds the placement object
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDebugOverlay.CreateLine">
            <summary>
            creates the line objects aligned to the top edge of the placement object
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDebugOverlay.UpdateLine">
            <summary>
            updates the position of the lines so that they keep aligned to the top of the placement object
            and sets the colours to match the status of the latest sample
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDebugOverlay.Cleanup">
            <summary>
            stops the debugging and destroys the line render objects
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDebugOverlay.Update">
            <summary>
            Cleanup if not in editor or the impression isn't valid, otherwise create / update lines
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDebugOverlay.GetPCSamplesToCompletion">
            <summary>
            Get the time until the advert completion
            </summary>
        </member>
        <member name="T:Adinmo.DeleteQueueItem">
            <summary>
            Used when deleting items from the queue. By default the deletion time is set as 1 second regardless.
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoDownloader">
            <summary>
            Manages all the placements and their image download tasks
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloader.placements">
            <summary>
            The dictionary of placements
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloader.placementImageConfigs">
            <summary>
            The dictionary of placement image configs
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloader.m_bStartNextDownload">
            <summary>
            Previous download has completed, so we can start another
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloader.m_initialPassPurgeComplete">
            <summary>
            After starting the game, and receiving getgamesettings, are there any in the cache that could be removed, if the cache is too big
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloader.m_initialPlacementsReady">
            <summary>
            Does each placement have at least one image to display
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoDownloader.m_queuedImageDownloads">
            <summary>
            The current queue of images that need to be downloaded
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoDownloader.Placements">
            <summary>
            The dictionary of placements
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.IsPlacementDeleted(System.String)">
            <summary>
            Does this placement belong to the list of deleted placements
            </summary>
            <param name="placementKey">The placement key to check</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.IsPlacementPaused(System.String)">
            <summary>
            Does this placemet belong to the list of paused placmeents
            </summary>
            <param name="placementKey">The placement key to check</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.ParseDownloadsFB(Adinmo.Flatbufs.GetGameSettingsRspFB)">
            <summary>
            Parses a downloads flatbuf from GetGameSettings to set up all the placements
            </summary>
            <param name="getGameSettingsRspFB">The flatbuf to parse</param>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.DeleteUnusedPlacementImages">
            <summary>
            Delete all placementImage definitons that are not in use
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.QueueOutstandingDownloads">
            <summary>
            Appends all the outstanding downloads, making sure all the image based ads are queued first, so there is something to show asap. 
            Rotates around all the placemnts so each placement has at least something to show asap.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.AddToDownloadQueue(Adinmo.AdinmoImageTexture)">
            <summary>
            Adds a image to the download queue and sets its download status to queued
            </summary>
            <param name="image">the image config to add</param>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.Setup">
            <summary>
            Hides the component from the developer
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.DownloadNextImage">
            <summary>
            Manages the download queue
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.DownloadImage(System.String,Adinmo.AdinmoBaseItem)">
            <summary>
            Coroutine for downloading an image
            </summary>
            <param name="url">The url to download the image from</param>
            <param name="baseItem">The item to download</param>
            <returns>The enumerator</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.DownloadHtml(Adinmo.PlacementImageConfig)">
            <summary>
            When downloading HTML, using a unity web request assign the bitmap to the web texture
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.GetPlacement(System.String)">
            <summary>
            Gets a placement from the dictionary of placements from it's key
            </summary>
            <param name="placementKey">The placement key to look for in the dictionary of placements</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.GetCurrentPlacementImageData(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the current image for a placement, or selects a new one
            </summary>
            <param name="placementKey">The key of the placemnt to get the image from</param>
            <param name="existingOnly">If there isn't a current image, don't select a new one</param>
            <param name="allowPriorityAds">whether to include premium ads in the result</param>
            <returns>The placement image</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.GetCurrentPlacementImageData(Adinmo.Placement,System.Boolean,System.Boolean)">
            <summary>
            Get the current image for a placement, or selects a new one
            </summary>
            <param name="placement">The placement to get the image from</param>
            <param name="existingOnly">If there isn't a current image, don't select a new one</param>
            <param name="allowPriorityAds">whether to allow return of a premium item</param>
            <returns>The placement image</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.FindSuitableImage(Adinmo.Placement,System.Boolean,System.Boolean)">
            <summary>
            Finds a suitable image that can be shown on a placement
            </summary>
            <param name="placement">The placement that is being considered as a target</param>
            <param name="allowWeb">Allow webview images to be selected</param>
            <param name="priorityAds">Allow priority ads to be considered</param>
            <returns>The image config selected</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.CheckAllPlacementsReady(System.Boolean)">
            <summary>
            Checks to see if each placement has at least one image to display
            </summary>
            <returns>true if each placement has a valid image</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.OnAllPlacementsReady">
            <summary>
            After all the placements are ready, dump the placeholders, make sure every placement has an image, and announce the sdk is ready
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.OnAllImagesDownloaded">
            <summary>
            After all the images have been downloaded, if not every placement has an image, report an error to trace
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.Update">
            <summary>
            main update loop for AdinmoDownload
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.SDKMoreAdsRequest">
            <summary>
            Requests more ads. Will only be run if enough time has elapsed between requests (Determined by the server).
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.SDKMoreAds(System.Collections.Generic.List{System.String})">
            <summary>
            Creates and processes a SDKMoreAds Request
            </summary>
            <returns>The Enumerator</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.GetBlackListPlacements(System.Collections.Generic.List{System.String})">
            <summary>
            Returns a list full of placements that have been black listed
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.FindNotInLevel">
            <summary>
            Searches the placements list and will track the placements that dont match the placement key        
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.RemoveRedundantImages">
            <summary>
            Removes any image that has expired or seen too often from the image pool for this placement
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.GetPoolSummary">
            <summary>
            Produces a breakdown of all the ads in the pool
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.RecordRemoval(Adinmo.PlacementImageConfig,System.String)">
            <summary>
            Will add a record to the sample with an Fill Failure reason.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.ProcessSdkMoreAdsRsp(Adinmo.Flatbufs.SdkMoreAdsRspFB)">
            <summary>
            Processes the response from SDKMoreAds
            </summary>
            <param name="sdk_more_ads_rsp">The SDKMoreAds response flatbuffer</param>
            <returns>The Enumerator</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.IsWebAvailable(Adinmo.Placement)">
            <summary>
            Check to see the app isn't trying to manage too many webviews
            </summary>
            <param name="currentPlacement">exclude the current placement from the check</param>
            <returns>true if there is more capacity for webviews</returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.SetCycleTime(System.DateTime)">
            <summary>
            Sets the time of the next placement cycle
            </summary>
            <param name="time">The UTC time when the next cycle needs to happen</param>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.GetPlacementImageConfig(System.String)">
            <summary>
            Get a matching PlacementImage in the pool
            </summary>
            <param name="guid">The Guid to search for</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoDownloader.GetRandomImageConfig(System.Single)">
            <summary>
            Returns random image data for an aspect ratio if in the Brand Choice Demo
            </summary>
            <param name="AspectRatio">the Aspect ratio to filter for</param>
        </member>
        <member name="T:Adinmo.AdinmoImageData">
            <summary>
            A class for storing the raw pool and related items
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoImageData.Images">
            <summary>
            A dictionary ofd all the stored image based ads
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoImageData.GetRandomImageData(System.String)">
            <summary>
            Returns random image data for an aspect ratio if in the Brand Choice Demo
            </summary>
            <param name="AspectRatio">The aspect ratio to search for</param>
        </member>
        <member name="M:Adinmo.AdinmoImageData.GetOrCreateImageData(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the Image Data if it already exists, otherwise create it with the following parameters
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoImageData.GetOrCreateVideoData(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.UInt32,System.String,System.Boolean)">
            <summary>
            Get the Video Data if it already exists, otherwise create it with the following parameters
            </summary>
            <param name="guid">The unique identifier of the placement</param>
            <param name="campaignGuid">The Guid of the relevant campaign</param>
            <param name="url">The url where the video will be downloaded from</param>
            <param name="colourStr">What colour to do the letterboxing</param>
            <param name="width">The width of the source video</param>
            <param name="height">The height of the source video</param>
            <param name="durationMS">The duration of the source video</param>
            <param name="linkUrl">Where to navigate to in the event of a click</param>
            <param name="wantsExtraBorder">Whether or not to allow space for a glow border</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoImageData.GetOrCreateWebTexture(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Get the WebBitmap Data if it already exists, otherwise create it with the following parameters
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoImageData.RemoveUnreferencedAssets">
            <summary>
            Remove all unreferenced RtbImages by adding them to their respective removal queues
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoImageRenderer">
            <summary>
            A wrapper for the textures of ads represented by a single/dual image
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoImageTexture">
            <summary>
            Inherit from AdinmoBaseTexture and override the methods related to Downloading an ImageTexture in particular.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoImageTexture.Download(System.String)">
            <summary>
            This override for download allows for the web request to create a Texture2D from the downloaded image
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoMagnifierController">
            <summary>
            View Controller for the Magnifier
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoMagnifierController.Finalize">
            <summary>
            Tidies up the native interface for iOS on shutdown of the magnifier
            </summary>
        </member>
        <member name="T:Adinmo.InAppAlreadyPurchasedReply">
            <summary>
            A structure for storing product information and AlreadyPurchased result in reply to a AlreadyPurchased Callback
            </summary>
        </member>
        <member name="M:Adinmo.InAppAlreadyPurchasedReply.#ctor(System.Boolean)">
            <summary>
            A limited reply that doesn't contain product info
            </summary>
            <param name="alreadyPurchased">True if the product has been bought</param>
        </member>
        <member name="M:Adinmo.InAppAlreadyPurchasedReply.#ctor(System.Boolean,System.Single,System.String)">
            <summary>
            A reply that contains more info than the basic one
            </summary>
            <param name="alreadyPurchased">True if the product has be bought</param>
            <param name="purchasePrice">The price of the item in local currency</param>
            <param name="purchaseCurrencyCode">The ISO currency code of the item</param>
        </member>
        <member name="T:Adinmo.StatusCallback">
            <summary>
            A delegate for sending a status message for the SDK to a developer defined callback 
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="T:Adinmo.UMPCallback">
            <summary>
            A delegate for passing information about the result of a UMP(CMP) check to a developer defined callback
            </summary>
            <param name="consentWasRequired">Whether consent was required</param>
            <param name="canShowAds">Whether Standard Ads can be shown</param>
            <param name="canShowPersonalisedAds">Whether ads based on personal information are permitted to be shown</param>
            <param name="TCF_String">The resultant TCF string</param>
        </member>
        <member name="T:Adinmo.ZebedeeCallback">
            <summary>
            A delegate for passing information about Zebedee status to the Zebedee controller after an operation has occurred
            </summary>
            <param name="success">Was the operation a success</param>
            <param name="gamertag">The Gamertag of the user</param>
            <param name="balanceSats">The user's balance in Sats</param>
            <param name="balanceChangeSats">How the user's balanace has changed as part of the operation</param>
            <param name="balanceDollars">The user's balance in dollars given today's exchange rate</param>
            <param name="feedback">Any feedback on the operation (usually as a result of a failure)</param>
        </member>
        <member name="T:Adinmo.PauseGameCallback">
            <summary>
            A delegate for a callback for when the SDK requires the game to pause (during showing a magnifier for example)
            </summary>
        </member>
        <member name="T:Adinmo.ResumeGameCallback">
            <summary>
            A delegate for a callback for when the SDK requires the game to resume (after showing a magnifier for example)
            </summary>
        </member>
        <member name="T:Adinmo.InAppPurchaseCallback">
            <summary>
            A delegate for a callback when the SDK requires the developer to process an IAP purchase triggered by clicking on an IAP ad
            </summary>
            <param name="iap_id">The IAP product id for the item to buy</param>
        </member>
        <member name="T:Adinmo.InAppPurchaseGetPriceCallback">
            <summary>
            A delegate for getting a localised string version of the price of an IAP
            </summary>
            <param name="iap_id">The IAP product ID</param>
            <returns></returns>
        </member>
        <member name="T:Adinmo.InAppPurchasedAlreadyCallback">
            <summary>
            A delegate for when the SDK requires a developer defined callback function that determines whether a Non Consumable IAP has already been purchased
            </summary>
            <param name="iap_id">The IAP product ID</param>
            <returns></returns>
        </member>
        <member name="T:Adinmo.AudioPlaybackCallback">
            <summary>
            A delegate for when the developer needs to pause background sound while an audio ad plays
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoManager">
            <summary>
            The main controller function for the AdInMo SDK
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.s_manager">
            <summary>
            The main Instance of the SDK manager
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.debugFontSize">
            <summary>
            Determines the size of the font used for debugs
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.basicDebug">
            <summary>
            Shows information such as failure reasons for placements when applicable.
            Also displays a bar above the placements to indicate that the placement can produce valid impressions.
            Green indicates impresison pending.\nWhite indicates impression successful.
            Red indicates there is an issue preventing impressions, see management panel for details
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.EnableAudioAds">
            <summary>
            Use to manually turn on the Audio Placement, so that audio ads can be processed
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.DisableAudioAds">
            <summary>
            Use to manually turn off the Audio Placement, so that audio ads can no longer be processed
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.showAdvancedDebug">
            <summary>
            Whether to show the advanced Debug options in the inspector
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.placementDebug">
            <summary>
            Shows additional placement information such as name, aspect ratio, coverage and angle
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.m_debugOnDevice">
            <summary>
            Whether the Adinmo debug shows on device builds
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.imageRenderDebug">
            <summary>
            Whether a visible indication of the visibility of the image is generated on the Adinmo Texture inspector"
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.m_applyAds">
            <summary>
            Whether to apply new ads to placements
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.m_camera">
            <summary>
            The default camera that impression will be checked against. If none, will pick the first active non sceneview camera in the hierarchy. Can be overridden on the AdimnoTexture component
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.m_gameKey">
            <summary>
            The main SDK identifier for this game
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.applicationVersion">
            <summary>
            A developer settable variable to tell the SDK what version the game is
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.clickLayerMask">
            <summary>
            Binary flag variable for setting the layer mask for what to ignore when raycasting a click
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetRewardedUrlTracker">
            <summary>
            Returns the UrlTracker for receiving Wallet info for a user 
            </summary>
            <returns></returns>
        </member>
        <member name="F:Adinmo.AdinmoManager.CustomMagnifierTemplate">
            <summary>
            The prefab to use instead of the default Magnifier Template PMCanvas
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.m_AndroidAdMobAppId">
            <summary>
            The Android Admob Application Id for this App
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.InAppPurchaseFailed(System.String,System.String,System.Single,System.String)">
            <summary>
            A method called by the developer to indicate that an IAP purchase failed
            </summary>
            <param name="iap_id">the product id of the IAP</param>
            <param name="isoCurrencyCode">The ISO currency code of the product</param>
            <param name="localizedPrice">The value of the IAP in local currency</param>
            <param name="failureReason">The reason that the purchase failed</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.InAppPurchaseSuccess(System.String,System.String,System.Single,System.String)">
            <summary>
            A method called by the developer to indicate that an IAP purchase succeeded
            </summary>
            <param name="iap_id">the product id of the IAP</param>
            <param name="isoCurrencyCode">The ISO currency code of the product</param>
            <param name="localizedPrice">The value of the IAP in local currency</param>
            <param name="transactionID">The transaction Id of the purchase, useful when checking for duplicated purchases and fraud</param>
        </member>
        <member name="F:Adinmo.AdinmoManager.m_iOSAdMobAppId">
            <summary>
            The iOS Admob Application Id for this App
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.activeIAPURL">
            <summary>
            A string storing information useful to the SDK about a pending IAP purchase
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.ClickStatus">
            <summary>
            Stores debug information about the click on ad process
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.MagnifierSortOrder">
            <summary>
            The sort order of the click magnifier's canvas
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.LoadAd(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            A helper function for force loading of an ad in the pool to a placement
            </summary>
            <param name="placement_key">The key of the placement which to apply the Ad</param>
            <param name="guid">The unique identifier of the Ad to load</param>
            <param name="excludeCampaigns">Campaigns to exclude when considering which Ad to load</param>
        </member>
        <member name="P:Adinmo.AdinmoManager.GameStatus">
            <summary>
            The status of the game as reported from the AdinmoServer.
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.UserAgentQueried">
            <summary>
            Return whether the UserAgent has been queried
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.SupportsZebedee">
            <summary>
            Whether this game supports Zebedeee
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.UserAgent">
            <summary>
            Return the UserAgent
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetAge(System.Int32)">
            <summary>
            A method for the developer to tell us the age of the user
            </summary>
            <param name="age"></param>
        </member>
        <member name="P:Adinmo.AdinmoManager.ImageDataManager">
            <summary>
            Return the AdinmoImageData script associated with the AdinmoManager
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetContextInfo(System.String)">
            <summary>
            A method for the developer to tell the SDK additional information about the players situation that could be helpful in determining which Ads to show
            </summary>
            <param name="contextInfo">Useful information that might improve monitization</param>
        </member>
        <member name="P:Adinmo.AdinmoManager.Sender">
            <summary>
            Return the AdinmoSender script associated with the AdinmoManager
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.Downloader">
            <summary>
            Return the AdinmoDownloader script associated with the AdinmoManager
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.Sampler">
            <summary>
            Return the AdinmoSampler script associated with the AdinmoManager
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.WebpageComplete(System.String)">
            <summary>
            Method called by the native code to indicate that the popup webpage is no longer being rendered 
            </summary>
            <param name="msg"></param>
        </member>
        <member name="P:Adinmo.AdinmoManager.DeviceModel">
            <summary>
            Return the Model Number (Android) / Device Code (Apple), will not neccesarily be accurate to the name of the device itself e.g. an iPhone 8 returns as an iPhone10,4
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.DeviceOS">
            <summary>
            Return the operating system details
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.DeviceName">
            <summary>
            Return the DeviceName e.g. Fake Kristan Phone
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.AppId">
            <summary>
            Return the application identifier (BundleIdentifier on Apple)
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.GameKey">
            <summary>
            Return the GameKey found on adinmo.com
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetApplicationVersion">
            <summary>
            Return the application verision specified in the AdinmoManager
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetApplicationVersion(System.String)">
            <summary>
            Set the application verision specified in the AdinmoManager
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.IsIdle">
            <summary>
            Indicates whether the screen hasn't been touched in a predetermined amount of time
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoManager.SuspendClicks">
            <summary>
            A method for setting whether to turn off the click interactions with placements in the AdInMo SDK
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoManager.DATA_USE_CONSENT_PREFS_KEY">
            The data use consent key in the player prefs 
        </member>
        <member name="M:Adinmo.AdinmoManager.SetAutoCycleTextures(System.Boolean)">
            <summary>
            A method for developers to turn on or off cycling Ads in the AdInMo SDK
            </summary>
            <param name="bEnabled">True to enable cycling</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.Resume">
            <summary>
            Resume placement updates
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.IsPaused">
            <summary>
            Return if placement updates are paused
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.Pause">
            <summary>
            Pause placement updates
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetMessageFromServer">
            <summary>
            Returns a message from the backend
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetAdinmoDeviceID">
            <summary>
            Return the AppUUID and if one doesn't exist, create and save one.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetDataUseConsent">
             Gets whetherr the  user has consented to use of the advertising id
            
             @returns True if it succeeds, false if it fails.
        </member>
        <member name="M:Adinmo.AdinmoManager.ResetConsent">
            <summary>
            Deletes whether or not consent has been given
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.IsDataUseConsentSet">
            <summary>
            Queries is data use consent has been set yet
            </summary>
            <returns>True if data use consent set, false if not.</returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetDataUseConsent(System.Boolean,System.String)">
            <summary>
            Sets whether the user has consented to use of the advertising id
            </summary>
            <param name="consent">True to consent.</param>
            <param name="tCConsentString">The consent string to process</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.IsReady">
            <summary>
            Returns whether the SDK has processed the initial batch of Ads and is capable of normal cycling
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.IsSuccess">
            <summary>
            Returns if the SDK was properly initialised
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.ResetGlobals">
            <summary>
            Reset the Global variables
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.AddOnReadyListener(UnityEngine.Events.UnityAction{System.String})">
            <summary>
            Adds a Listener for when the SDK has reached a 'Ready' state
            </summary>
            <param name="call">Developer defined method to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.RemoveOnReadyListener(UnityEngine.Events.UnityAction{System.String})">
            <summary>
            Removes a Listener for when the SDK has reached a 'Ready' state
            </summary>
            <param name="call">Developer defined method to remove</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.ClearOnReadyListener">
            <summary>
            Removes all listeners for the OnReady State
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetOnReadyCallback(Adinmo.StatusCallback)">
            <summary>
            Set a developer defined function to call when initial setup of the AdInMo SDK is complete
            </summary>
            <param name="pfn">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetPauseGameCallback(Adinmo.PauseGameCallback)">
            <summary>
            Use to tell the developer that a clickable ad link or magnifier is showing 
            therefore the developer needs to take what actions are required to pause the game and mute sound
            </summary>
            <param name="pfn">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetResumeGameCallback(Adinmo.ResumeGameCallback)">
            <summary>
            Use to tell the developer that a clickable ad link or magnifier has finished showing 
            therefore the developer needs to take what actions are required to resume the game and unmute sound
            </summary>
            <param name="pfn">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetInAppPurchaseCallback(Adinmo.InAppPurchaseCallback)">
            <summary>
            Developer defined function to call when the SDK has registered a click on an IAP Ad
            Used to process the purchase
            </summary>
            <param name="pfn">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetInAppPurchaseGetPriceCallback(Adinmo.InAppPurchaseGetPriceCallback)">
            <summary>
            Developer defined function to call when the SDK needs to know the price of an IAP product
            </summary>
            <param name="pfn">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetInAppPurchasedAlreadyCallback(Adinmo.InAppPurchasedAlreadyCallback)">
            <summary>
            Developer defined function to call when the SDK needs to know if an Non consumable IAP has already been purchased
            </summary>
            <param name="pfn">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetAudioAdStartedCallback(Adinmo.AudioPlaybackCallback)">
            <summary>
            Developer defined function to call when the SDK is trying to play an audio Ad
            and needs the developer to handle pausing / reducing background sound
            </summary>
            <param name="callback">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetAudioAdFinishedCallback(Adinmo.AudioPlaybackCallback)">
            <summary>
            Developer defined function to call when the SDK has finished playing an audio Ad
            and needs the developer to handle resuming normal background sound volumes
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Adinmo.AdinmoManager.CycleTextures">
            <summary>
            Forces placements to be updated when called
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.OpenURL(System.String,System.Boolean)">
            <summary>
            Opens a url either as an installer popup or in the browser
            </summary>
            <param name="url">The url to call</param>
            <param name="isInstaller">Whether the url is known to point to an installer</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.OpenURL(System.String)">
            <summary>
            Opens a url in the browser
            </summary>
            <param name="url">The url to navigate to</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.btnCTA">
            <summary>
            The method to call when the Call To Action button or magnifier is pressed
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.CheckIfIdle">
            <summary>
            Will run an idle test to see if the application has been idle for too long
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.UpdatePlacements(System.Boolean,System.Boolean)">
            <summary>
            If textures are set to auto cycle and it is not paused, update the placements reguarly
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.ApplyAllTextures(System.Boolean)">
            <summary>
            This is run initially and applied to the Quads
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.SaveImpressionsAndTrackers">
            Saves any outstanding impressions to disk
        </member>
        <member name="M:Adinmo.AdinmoManager.LoadChoices">
            <summary>
            Load Ad choices into a Choice Dialog
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.TCFStringRecieved(System.String)">
            <summary>
            Called by the native code sends a TCF consent string to be processed
            </summary>
            <param name="consentString">A TCF string</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.CheckConsent(Adinmo.UMPCallback)">
            <summary>
            Method to call to check UMP consent
            </summary>
            <param name="resultCallback">Function to call when consent processing is complete</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.ResetConsent(Adinmo.UMPCallback)">
            <summary>
            Method to call to reset the current UMP consent information, and rerequest it
            </summary>
            <param name="resultCallback">Function to call when process is complete</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.GotAdvertisingID(System.String)">
            <summary>
            Method to call when the Advertising ID has been retrieved from native code
            </summary>
            <param name="advertiserID">The Advertising ID</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.Dispose">
            <summary>
            Method to call to "Clean" the AdinmoManager static params
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetZBDOpCallback(Adinmo.ZebedeeCallback)">
            <summary>
            Set the method to call when a Zebedee op has completed
            </summary>
            <param name="callback">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetZBDUpdateCallback(Adinmo.ZebedeeCallback)">
            <summary>
            Set the method to call when a Zebedee update has completed
            </summary>
            <param name="callback">The function to call</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.HandleRedirectedUrl(System.String)">
            <summary>
            When iOS native interface for a webpage needs to handle a redirect
            </summary>
            <param name="url">The url to forward to</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetZBDGamerTag">
            <summary>
            Returns the current gamerTag for Zebedee
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetZBDSatsBalance">
            <summary>
            Returns the current user balance in Zebedeee in Sats
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.GetZBDDollarBalance">
            <summary>
            Returns the current user balance in Zebedee in dollars
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetZBDGamerTag(System.String)">
            <summary>
            Sets the Gamer Tag of a Zebedee user
            </summary>
            <param name="newTag">New tag value</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.ZBDCashOut(System.String,System.Int32)">
            <summary>
            Attempts to cash out an internal Zebedee reward balance as Sats
            </summary>
            <param name="gamertag">The gamerTag of the user to cashout</param>
            <param name="amount">The amount to cashout</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetBorderType(System.Int32)">
            <summary>
            A way of overriding the border type for a clickable Ad for all placements
            </summary>
            <param name="borderType">Maps onto the BorderType enum (0 = GlowShrink = 0,1 = GlowNoShrink,2 = NoBorder)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetBorderType(Adinmo.AdinmoReplace,System.Int32)">
            <summary>
            A way of overriding the border type for a clickable Ad limited to the mentioned placement
            </summary>
            <param name="adinmoReplace">The placement to set the border type on</param>
            <param name="borderType">Maps onto the BorderType enum (0 = GlowShrink = 0,1 = GlowNoShrink,2 = NoBorder) </param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetBorderCycle(System.Int32)">
            <summary>
            A way of overriding the border cycling mode for a clickable Ad for all placements
            </summary>
            <param name="borderCycle">Maps onto the BorderCycleMode enum (0 = Pulse,1 = None, 2 = Hue)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetBorderCycle(Adinmo.AdinmoReplace,System.Int32)">
            <summary>
            A way of overriding the border cycling mode for a clickable Ad on a Placement
            </summary>
            <param name="borderCycle">Maps onto the BorderCycleMode enum (0 = Pulse,1 = None, 2 = Hue)</param>
            <param name="adinmoReplace">The placement to set the cycle mode on</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetClickMech(System.Int32)">
            <summary>
            Overrides the click mechanic for all placements
            </summary>
            <param name="clickMechType">Int maps onto the ClickMechanic enum (0 = Tap, 1=Other)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetClickMech(Adinmo.AdinmoReplace,System.Int32)">
            <summary>
            Overrides the click mechanic for a placement
            </summary>
            <param name="adinmoReplace">The placement to override behaviour</param>
            <param name="clickMechType">Int maps onto the ClickMechanic enum (0 = Tap, 1=Other)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetClickResponse(System.Int32)">
            <summary>
            Overrides the click reponse type for all placements
            </summary>
            <param name="clickResponseType">Int maps onto the ClickResponseType enum (0 = NoResponse, 1 = Haptic, 2 = PulseQuicken)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetClickResponse(Adinmo.AdinmoReplace,System.Int32)">
            <summary>
            Overrides the click reponse type for mentioned placement
            </summary>
            <param name="adinmoReplace">The placement to make the change on</param>
            <param name="clickResponseType">Int maps onto the ClickResponseType enum (0 = NoResponse, 1 = Haptic, 2 = PulseQuicken)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetClickHandler(System.Int32)">
            <summary>
            Overrides the click handler for all placements
            </summary>
            <param name="clickHandler">Int maps onto the ClickHandler enum (0 = Overlay, 1 = ShellOut)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetClickHandler(Adinmo.AdinmoReplace,System.Int32)">
            <summary>
            Overrides the click handler for mentioned placement
            </summary>
            <param name="adinmoReplace">The placement to make the change on</param>
            <param name="clickHandler">Int maps onto the ClickHandler enum (0 = Overlay, 1 = ShellOut)</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetUseMagnifier(System.Boolean)">
            <summary>
            Overrides the whether to use the magnifier for all placements
            </summary>
            <param name="magnify">True to use the magnifier</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetUseMagnifier(Adinmo.AdinmoReplace,System.Boolean)">
            <summary>
            Overrides the whether to use the magnifier for mentioned placement
            </summary>
            <param name="adinmoReplace">The placement to make the change on</param>
            <param name="magnify">True to use the magnifier</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.SetAutoPauseGame(System.Boolean)">
            <summary>
            Sets whether autopausing the game is the default behaviour for when a magnifier or shell out occurs
            </summary>
            <param name="autoPauseGame"></param>
        </member>
        <member name="M:Adinmo.AdinmoManager.FailedOpenURL(System.String)">
            <summary>
            Method to call when the native webview code can't open a url
            </summary>
            <param name="url">The url that was attempted</param>
        </member>
        <member name="M:Adinmo.AdinmoManager.ProcessTouchUpOnPlacement(System.Single,System.Single)">
            <summary>
            Processing the touch up event on a placement
            </summary>
            <param name="x">screen x coordinate</param>
            <param name="y">screen y coordinate</param>
            <returns></returns>
        </member>
        <member name="T:Adinmo.AdinmoPlaceholder">
            <summary>
            This script will simply get a suitable placeholder at the correct aspect ratio
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoPlaceholder.GetSuitablePlaceholder(System.Single,System.Boolean)">
            <summary>
            Finds a suitable placeholder image for a given placement
            </summary>
            <param name="aspectRatio">The aspect ratio of the placement</param>
            <param name="squareTexture">Whether to treat it as a square texture or matched size</param>
            <returns></returns>
        </member>
        <member name="T:Adinmo.AdinmoReplace">
            <summary>
            The base class attached to a AdInMo placement that manages what the texture displays during cycling
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoReplace.ObjectType">
            <summary>
            The type of object that is rendering the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.ObjectType.Invalid">
            <summary>
            Couldn't work out what type of object the placement is
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.ObjectType.Image">
            <summary>
            The object is attached to an Image Renderer
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.ObjectType.Mesh">
            <summary>
            The object is attached to a Mesh Renderer
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.ObjectType.Sprite">
            <summary>
            The object is attached to a Sprite Renderer
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.m_placementKey">
            <summary>
            The placement key for this placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.m_hideUntilReady">
            <summary>
            Hides the placemnt until an image is ready to view
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.m_camera">
            <summary>
            The camera that impression will be checked against. If none, will default to the camera setup on the AdinmoManager compoenent
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.m_disablePlaceholder">
            <summary>
            When unchecked an Adinmo placeholder image will appear before the first downloaded image is available
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.ShrinkToFitParent">
            <summary>
            This object will be resized when shrinking to fit.
            Typically a border around the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.SampleTexture">
            <summary>
            The current texture sample for displaying per pixel occlusion
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.LatestFailureReason">
            <summary>
            The last reason that the impression failed
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.OccluderName">
            <summary>
            The name of the thing currently occluding the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.layerMask">
            <summary>
            A bitmask of all the layers to ignore when clicking for occlusion
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.m_originalImage">
            <summary>
            If it's an image placement, holds the gameobject
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoReplace.OnChangeDelegate">
            <summary>
            A delegate for a function that is called when the placement is enabled or disabled
            </summary>
            <param name="recreate"></param>
        </member>
        <member name="F:Adinmo.AdinmoReplace.OnChange">
            <summary>
            A method to invoke when the placement is enabled or disabled or a sample is taken
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.LatestSample">
            <summary>
            The lastest sample result
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.m_image">
            <summary>
            The image component in a image placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.m_rawImage">
            <summary>
            The raw image component in an image placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.RenderBorderType">
            <summary>
            The current border type for the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.RenderBorderCycleMode">
            <summary>
            The current border cycle mode for the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.PlacementClickResponseType">
            <summary>
            The current click reponse type for the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.PlacementClickMechanic">
            <summary>
            The current click mechanic for the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.ClickHandler">
            <summary>
            The current click handler for the placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.UsesMagnifier">
            <summary>
            Whether or not the magnifier is in use for this placement
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoReplace.DwellTimeImpression">
            <summary>
            Current active dwell time impression
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoReplace.Replacements">
            <summary>
            A list of all the placements currently in the scene
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoReplace.PlacementTexture">
            <summary>
            Return the currently displayed texture on this placement.
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoReplace.BaseRenderer">
            <summary>
            The current renderer object that represents the Ad on the placement
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoReplace.GetStatusString">
            <summary>
            Gets a description of the status of the placement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoReplace.GetBorderColor">
            <summary>
            Returns the current border color for the placement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoReplace.GetObjectType">
            <summary>
            returns what object type the placement is rendering on
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoReplace.Init">
            <summary>
            Base method for what happens when a placement is initialised
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoReplace.StartDebugging">
            <summary>
            Initiate the debugging object
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoReplace.StopDebugging">
            <summary>
            Stop the debugging object
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoReplace.UpdateDebugging(UnityEngine.Color,System.Single)">
            <summary>
            Update the debugging object such that a white header indicates nothing, red indicates failed impression, green indicates successful impression
            </summary>
            <param name="c">The colour to set the header too</param>
            <param name="percentRemaining">The remaining percentage of the impression</param>
        </member>
        <member name="M:Adinmo.AdinmoReplace.SetDebugColor(UnityEngine.Color)">
            <summary>
            Set the Colour of the Debug header
            </summary>
            <param name="c">The colour to use</param>
        </member>
        <member name="M:Adinmo.AdinmoReplace.IsImageActive">
            <summary>
            Is the image component active and enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoReplace.ComputeNextSampleTime(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Sets the time the next sample will occur. 
            if impression is setting the next time, use that, otherwise just set to a standard impression sample interval in the future
            </summary>
            <param name="now">current time </param>
            <param name="precomputedTime">Set if impression is setting the next time</param>
        </member>
        <member name="M:Adinmo.AdinmoReplace.SetRendererEnabled(System.Boolean)">
            <summary>
            Enabled the Sprite / Image component
            </summary>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Adinmo.AdinmoReplace.OnReady">
            <summary>
            Called when the placement is showing something for the first time
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoReplace.ApplyTextureToImage(Adinmo.Flatbufs.MediaType,UnityEngine.Texture)">
            <summary>
            Applies the new texture to the image component
            </summary>
            <param name="mediaType">What type of media are we applying</param>
            <param name="t">The texture to apply</param>
            
        </member>
        <member name="T:Adinmo.Sample">
            <summary>
            The structure for a sample result, including an override to return as a string.
            </summary>
            
        </member>
        <member name="F:Adinmo.Sample.sample">
            <summary>
            The sample value
            </summary>
        </member>
        <member name="F:Adinmo.Sample.size">
            <summary>
            The sample size
            </summary>
        </member>
        <member name="F:Adinmo.Sample.location">
            <summary>
            The closeness of the sample to the centre of the screen
            </summary>
        </member>
        <member name="F:Adinmo.Sample.angle">
            <summary>
            The angle of the sample to the camera plane
            </summary>
        </member>
        <member name="F:Adinmo.Sample.occlusion">
            <summary>
            The proportion of occlusion for the sample
            </summary>
        </member>
        <member name="F:Adinmo.Sample.touch">
            <summary>
            Whether the user touched the placement during this sample
            </summary>
        </member>
        <member name="M:Adinmo.Sample.ToString">
            <summary>
            A string representation of the sample
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adinmo.SampleResult">
            <summary>
            The status of a sample
            </summary>
        </member>
        <member name="F:Adinmo.SampleResult.NextSampleTime">
            <summary>
            The time to start the next sample
            </summary>
        </member>
        <member name="F:Adinmo.SampleResult.JustCompleted">
            <summary>
            Whether the impression was just completed successfully this frame on this particular placement
            </summary>
        </member>
        <member name="F:Adinmo.SampleResult.JustFailed">
            <summary>
            Whether the impression was known to have failed this frame on this particular placement
            </summary>
        </member>
        <member name="F:Adinmo.SampleResult.Failed">
            <summary>
            Whether the impression is now failed
            </summary>
        </member>
        <member name="F:Adinmo.SampleResult.SampleRate">
            <summary>
            The sample rate the impression in seconds
            </summary>
        </member>
        <member name="M:Adinmo.SampleResult.ToString">
            <summary>
            A string representation of the sample result
            </summary>
            <returns></returns>
        </member>
        <member name="T:Adinmo.Impression">
            <summary>
            Stores information about an Impression attempt
            </summary>
        </member>
        <member name="F:Adinmo.Impression.Samples">
            <summary>
            The list of samples in this Impression
            </summary>
        </member>
        <member name="F:Adinmo.Impression.DwellTimeSamples">
            <summary>
            The list of Dwell time samples in this impression attempt
            </summary>
        </member>
        <member name="P:Adinmo.Impression.SampleRate">
            <summary>
            The number of samples taken per second
            </summary>
        </member>
        <member name="F:Adinmo.Impression.Failed">
            <summary>
            Whether the Impression failed
            </summary>
        </member>
        <member name="M:Adinmo.Impression.#ctor(System.DateTime,System.Single,System.Int32,System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Construct an impression with ease
            </summary>
        </member>
        <member name="M:Adinmo.Impression.InRange(System.DateTime)">
            <summary>
            Return if the specified time is within the start and end time of this impression.
            </summary>
        </member>
        <member name="M:Adinmo.Impression.CreateSampleResult(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new sample result, called in AddSample().
            </summary>
        </member>
        <member name="M:Adinmo.Impression.AddSample(System.DateTime,Adinmo.Sample,System.Single,Adinmo.Flatbufs.FillFailureReason)">
            <summary>
            Add a sample with the following data
            </summary>
        </member>
        <member name="M:Adinmo.Impression.CheckIfFailed(System.DateTime)">
            <summary>
            check to see if the impression has failed, only works on a completed impression
            </summary>
            <param name="sampleTime"></param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.Impression.CreatePlacementImageImpressionFB(Google.FlatBuffers.FlatBufferBuilder)">
            <summary>
            Create PlacementImage Impression with a FlatBufferBuilder
            </summary>
        </member>
        <member name="M:Adinmo.Impression.FinaliseStatus">
            <summary>
            Finalise the status as to failed or not.
            </summary>
        </member>
        <member name="M:Adinmo.Impression.IsFinished(System.DateTime)">
            <summary>
            Return True or False whether the session has finished.
            </summary>
        </member>
        <member name="T:Adinmo.PlacementSamples">
            <summary>
            a container for all the Impressions taken for a placement in between messages
            </summary>
        </member>
        <member name="M:Adinmo.PlacementSamples.CreateNewImpression(Adinmo.Sample,System.DateTime,Adinmo.ServerConfig,Adinmo.Flatbufs.FillFailureReason,System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Create a new impression that will return a SampleResult.
            </summary>
        </member>
        <member name="M:Adinmo.PlacementSamples.InsertCompletedImpression(Adinmo.ServerConfig,System.DateTime)">
            <summary>
            Insert a completed compression.
            </summary>
        </member>
        <member name="M:Adinmo.PlacementSamples.RemoveCompletedImpressions(System.DateTime)">
            <summary>
            Remove all completed impressions (Compare against DateTime now)
            </summary>
        </member>
        <member name="T:Adinmo.ImpressionsSummary">
            <summary>
            Structure containing various variables that summarise the impression.
            </summary>
        </member>
        <member name="F:Adinmo.ImpressionsSummary.PCSamplesRemaining">
            <summary>
            percentage samples remaining to main a valid impression
            </summary>
        </member>
        <member name="F:Adinmo.ImpressionsSummary.CurrentNumberImpressions">
            <summary>
            Current number of impressions for this placement not sent
            </summary>
        </member>
        <member name="F:Adinmo.ImpressionsSummary.TotalNumberImpressions">
            <summary>
            Total number of impressions
            </summary>
        </member>
        <member name="F:Adinmo.ImpressionsSummary.CurrentNumberFailedImpressions">
            <summary>
            Current number of failed impressions not sent
            </summary>
        </member>
        <member name="F:Adinmo.ImpressionsSummary.TotalNumberFailedImpressions">
            <summary>
            Total number of failed impressions
            </summary>
        </member>
        <member name="F:Adinmo.ImpressionsSummary.CurrentImageValid">
            <summary>
            Whether the image is current showing a valid impression
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoSampler">
            <summary>
            A class for maintaining information about impressions and samples
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSampler.Setup">
            <summary>
            Hide in Inspector and create a new tracker counter and placement sample list.
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoSampler.m_placementSamples">
            <summary>
            All the placement samples in the system
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoSampler.GrandTotalValidImpressions">
            <summary>
            Grand total of all the valid impressions this session
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoSampler.GrandTotalFailedImpressions">
            <summary>
            Grand total of all the failed impressions this session
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoSampler.sentValidImpressions">
            <summary>
            The number of valid impressions sent to the backend this session
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoSampler.sentFailedImpressions">
            <summary>
            The number of failed impressions sent to the backend this session
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSampler.GetExistingPlacementSamples(System.String,System.String,System.String)">
            <summary>
            Get Existing Placement Samples from the provided data.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSampler.GetImpressionsSummary(System.String)">
            <summary>
            Get a summary of all of the impressions from a placement key.
            <param name="placementKey">The placement key to get a summary for</param>
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSampler.GetOrCreatePlacementSamples(System.String,Adinmo.PlacementImageConfig)">
            <summary>
            If a placement sample does not exist for return, one will be created and returned.
            </summary>
            <param name="placementKey">The placement key</param>
            <param name="imageConfig">The image for which the sample will be created</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoSampler.RecordSample(System.String,Adinmo.PlacementImageConfig,Adinmo.Sample,System.DateTime,Adinmo.Flatbufs.FillFailureReason,System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Record a sample.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSampler.GetSendByteArray(System.Boolean,System.UInt32,System.Collections.Generic.List{Adinmo.PlacementSamples})">
            <summary>
            Get the byte array that is going to be sent to AdinmoSender.
            </summary>
            <param name="save">Whether this byte array is to be cached</param>
            <param name="batchno">The batch number that is used when sending the message, used to validate everything has been received</param>
            <param name="notSeenPlacements">Not seen placements if shutdown is occuring</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoSampler.GetMergedByteArray(System.Collections.Generic.List{System.Byte[]},System.String@)">
            <summary>
            Merge all cached impression arrays into one for sending
            </summary>
            <param name="flatbuffsArrays">The arrays of cached impressions</param>
            <param name="batchnumbers">The list of batch numbers this cache covers</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoSampler.HaveImpressionsToSend">
            <summary>
            Return True or False if there are impressions to send.
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoImageCacheRecord">
            <summary>
            The structure of an AdinmoImageCacheRecord
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoImageCacheRecord.Size">
            <summary>
            The size of the image record in bytes
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoImageCacheRecord.Time">
            <summary>
            The time the cache occured
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoImageCacheRecord.ImageGuid">
            <summary>
            The guid of the image
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoImageCacheRecord.StringValue">
            <summary>
            String representation of this record
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoSaver">
            <summary>
            This class is where the methods for saving are actually held
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoSaver.NoBanners">
            <summary>
            A flag indicating not to send banners to this device
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.#ctor">
            <summary>
            When called, load the cache dictionary.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.ClearSavedImpressions">
            <summary>
            Clear any previously saved impressions.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.GetSavedImpressions">
            <summary>
            Get the impressions that have been saved in PlayerPrefs
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.SaveImpressions(System.Byte[],System.Int32,System.Int32,System.UInt32,System.Boolean)">
            <summary>
            Save the imperssions to PlayerPrefs in a Base64 string.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.GetFullPath(System.String)">
            <summary>
            Get the full file path for a file by appaending the persistantDataPath onto it.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.ClearTextureCache">
            <summary>
            Clear the texture cache by getting the filepath from guids and deleting them.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.CacheTexture(System.String,System.Byte[])">
            <summary>
            Write the texture to persistantDataPath and also createa new record - caching and adding it to the dictionary if required.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.GetTextureCacheURL(System.String)">
            <summary>
            Return the texture cache URL.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.CacheConfig(System.Byte[])">
            <summary>
            Convert a byte array to base64 string and save the config with this string data.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.GetCachedConfig">
            <summary>
            Retrieve from PlayerPrefs and convert from Base64 string to ByteArray.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.PurgeOldImages">
            <summary>
            Get rid of old images if over cache limit
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.GetImageAge(System.String)">
            <summary>
            Get the age of the image by comparing the recorded cache time to now.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.SaveCacheDictionary(System.Boolean)">
            <summary>
            Save the cache dictionary to PlayerPrefs.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.LoadCacheDictionary">
            <summary>
            Parse the loaded Cache Dictionary from PlayerPrefs.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.HasSavedImpressions">
            <summary>
            Returns whether the PlayerPrefs key for SavedImpressions exists.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.SetNoBanners">
            <summary>
            Sets a flag that stops banners being sent to this sdk
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.ClearNoBanners">
            <summary>
            Clears the no banners flag
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.HasSavedTrackers">
            <summary>
            Returns whether the PlayerPrefs key for HasSavedTrackers exists.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.SaveTrackers(System.Collections.Generic.List{Adinmo.Tracker})">
            <summary>
            If samples exist, save them to PlayerPrefs as Base64 strings.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.RestoreTrackers">
            <summary>
            Restore the trackers from Base64 string in PlayerPrefs.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.ClearSavedTrackers">
            <summary>
            Clear Trackers by deleting the PlayerPrefs key.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSaver.GetImpsBatchNo(System.Boolean)">
            <summary>
            Gets the used batch number for impressions
            </summary>
            <param name="current">Whether to not increment the counter</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoScreenshot.Start">
            <summary>
            On Start, if screenshots are enabled, calculate the next screenshot time.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoScreenshot.Update">
            <summary>
            If screenshots are enabled and it is time for a screenshot, takeone and then calculate the next screenshot time.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoScreenshot.TakeScreenshotCo">
            <summary>
            Get the current camera and take a screenshot by converting the current frame into a Texture2D. Encode to .PNG and then send the screen capture.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoScreenshot.CalculateNextScreenshotTime">
            <summary>
            Use the screenshot frequences from the Sender ServerConfig to determine when the next screenshot will be.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoScreenshot.SendScreenCapture(System.Byte[])">
            <summary>
            Send the texture data to the upload-screenshot url using the sendFBDataToUrl method in the AdinmoSender.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoScreenshot.GetCurrentCamera">
            <summary>
            Get the camera identifier by the AdinmoManager or alternatively the camera that is currently in use.
            </summary>
        </member>
        <member name="T:Adinmo.LogItem">
            <summary>
            The struct for LogItems with a couple of ways the a log can be constructed e.g. with a datetime attatched.
            </summary>
        </member>
        <member name="T:Adinmo.ServerConfig">
            <summary>
            Contains the various variables requires for configuring the connection to the server.
            </summary>
        </member>
        <member name="M:Adinmo.ServerConfig.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.sendRate">
            <summary>
            How often to send Impressions to the backend
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.sizeThreshold">
            <summary>
            The minimum size of a valid impression compared to the screen
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.maxCycleInterval">
            <summary>
            The longest time between cycles if there has been no valid impression
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.coolOffPeriod">
            <summary>
            The default cooloff time after a valid impression
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.loadMoreAdsFrequency">
            <summary>
            The time between sending a request to the backend for more ads
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.defaultImpressionTime">
            <summary>
            How long an image / banner impression is
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.defaultNumberOfSamples">
            <summary>
            The number of samples required for a valid impression for image / banner
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.timeout">
            <summary>
            How long is the time out on any message to the server
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.minClientVersion">
            <summary>
            minimum compatible client
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.enableImageCache">
            <summary>
            Whether to cache images on the device
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.enableImpressionCache">
            <summary>
            Whether to cache impressions on the device
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.imageCacheMaxAge">
            <summary>
            The TTL of images in the on device cache
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.imageCacheSize">
            <summary>
            The max size of the on device cache before pruning occurs
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.rtbApiHost">
            <summary>
            The address of the backend to use
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.editorMsg">
            <summary>
            Message from the server to display in the client
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.feature_rtb">
            <summary>
            Whether to process rtb ads from the backend
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.maxWebviewWarmupFrames">
            <summary>
            The number of frames to render of the webview before displaying
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.minPHashBlankThreshold">
            <summary>
            The value below which a phash test is said to have failed
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.maxBlankPHashThresholdCount">
            <summary>
            The number of failed lines in the phash test before the image is rejected
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.country">
            <summary>
            The server determined country for the device
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureTracing">
            <summary>
            Whether to record detailed logs in the console
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureSSErrors">
            <summary>
            Whether to record error logs on the server
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureSSTrace">
            <summary>
            Whether to record all logs on the server
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureScreenshot">
            <summary>
            Whether to record screenshots of placements periodically
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureScreenshotFrequency">
            <summary>
            How often to take a screenshot
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureScreenshotScale">
            <summary>
            What scale to save the screenshot at
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureAspectCheck">
            <summary>
            Whether to adjust the aspect ratio of the in game placement to match the server placement aspect ratio
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.rayCastSteps">
            <summary>
            The number of raycast samples to take to determine occlusion
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureWebView">
            <summary>
            Whether to create webviews to display banner ads
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureWebViewPreDisplayDelay">
            <summary>
            The amount of time to delay showing a rendered 
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.maxWebviews">
            <summary>
            The maximum number of webviews to be processed at any one time
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.maxImageConfigsPerPlacement">
            <summary>
            The maximum number of Image Configs to be in the pool for that AR before pruning occurs
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.MaxLengthPlacementQueue">
            <summary>
            The maximum number of Image Configs to be against an AR before the placement is blacklisted for new ads  
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.videoImpressionTime">
            <summary>
            The amount of time needed for an impression to count on a video
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.numberOfVideoSamples">
            <summary>
            The number of samples needed of a video before it counts as a valid impression
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.idleTime">
            <summary>
            Time in seconds between activity before device is deemed idle
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.featureLetterboxedImages">
            <summary>
            Whether to allow letterboxed images when AR doesn't match
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.debugDisableLoadMoreAds">
            <summary>
            Whether to turn of sending SDKMoreAds
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.debugAlwaysCheckAspectRatio">
            <summary>
            Whether to check aspect ratio missmatches every frame
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.allowAudioAds">
            <summary>
            Whether to allow audio Ads
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.audioCycleInterval">
            <summary>
            Minimum time between successive audio Ads
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.maxAudioBufferSize">
            <summary>
            Maximum number of audio ads in the queue after which no more will be accepted
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.MagnifierTheme">
            <summary>
            The theme for the magnifier
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.MagnifierHeader">
            <summary>
            Whether to show the AdInMo header on the magnifier
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.MaxImagePixels">
            <summary>
            The maximum number of pixels to allow for in a Vast video without 
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.AppInstallerDomains">
            <summary>
            list of domains that are treaded as installer locations for XP
            </summary>
        </member>
        <member name="F:Adinmo.ServerConfig.rewardedUrlTracker">
            <summary>
            The url used to get wallet balances for zebedee
            </summary>
        </member>
        <member name="M:Adinmo.ServerConfig.GetImpressionTime(System.Boolean)">
            <summary>
            Gets the impression time for an Ad
            </summary>
            <param name="isVideo">Whether the Ad is video or not</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.ServerConfig.GetNumberOfSamples(System.Boolean)">
            <summary>
            Gets the number of samples to take for a successful impression
            </summary>
            <param name="isVideo">Wether the Ad is video or not</param>
            <returns></returns>
        </member>
        <member name="P:Adinmo.ServerConfig.DefaultImpressionTime">
            <summary>
            The fallback impresion time
            </summary>
        </member>
        <member name="P:Adinmo.ServerConfig.DefaultNumberOfSamples">
            <summary>
            The fallback number of samples for an impression
            </summary>
        </member>
        <member name="T:Adinmo.AdvertisingIdResult">
            <summary>
            Contains the structure for creating / returning an advertising result
            </summary>
        </member>
        <member name="T:Adinmo.ResponseError">
            <summary>
            For Serializing response from GetGameSettings errors
            </summary>
        </member>
        <member name="F:Adinmo.ResponseError.code">
            <summary>
            The Error code
            </summary>
        </member>
        <member name="F:Adinmo.ResponseError.message">
            <summary>
            The associated error message
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoSender">
            <summary>
            The class that does most of the comms with the backend
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoSender.Saver">
            <summary>
            The Saver object that interfaces with the playerprefs
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.IsOnline">
            <summary>
            Return if the SDK has connected with the supplied server config.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.GetConfig">
            <summary>
            Return the server config.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.Setup">
            <summary>
            Configure all components and variables, read the config file from the existing cache if there is one and mark now as the start of a session.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.ReadCachedConfig(System.Boolean,System.Boolean)">
            <summary>
            Used to read the cached server config.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.LogInfo(System.String,System.Boolean)">
            <summary>
            Will Info Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.LogVerbose(System.String,System.Boolean)">
            <summary>
            Will Verbose Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.LogDebug(System.String,System.Boolean)">
            <summary>
            Will Debug Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.LogWarning(System.String,System.Boolean)">
            <summary>
            Will Warning Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.LogError(System.String,System.Boolean)">
            <summary>
            Will Error Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.LogCritical(System.String,System.Boolean)">
            <summary>
            Will Critical Error Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.Update">
            <summary>
            If not paused, update sending, config and traces. Dependent on DataUseConsent.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.UpdateConfig">
            <summary>
            Retrieve the server config if required.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.GetVersion">
            <summary>
            Return the ClientVersion.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.GetSdkSource">
            <summary>
            Return the SDK Source (Origin).
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.OnApplicationQuit">
            <summary>
            Upon Quitting send the remaining impressions if possible.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.ComputedAdvertisingId(Adinmo.AdinmoManager)">
            <summary>
            Get the advertising id async as long as tracking is enabled.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.GetServerConfig">
            <summary>
            Get GameSettings using the supplied server config. Uses Unity WebRequest and will check for various failures / unexpected results dependent on the platform.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.GetGetGameSettingsByteArray">
            <summary>
            Returns GameSettings as a ByteArray.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.GetSaver">
            <summary>
            Returns the AdinmoSaver script.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.OnServerSuccess">
            <summary>
            Run on server success. Check to see if running on Vulkan on an unsupported device, mark config as successful and allow download of any placements.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.RetryGetConfig">
            <summary>
            Will mark m_configFail as false so that the config can be tried again.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.OnServerFail(System.Boolean)">
            <summary>
            Run when the connection to the server has failed. If asked to retry, will invoke RetryGetConfig() in 5 seconds time.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.IsClientOutOfDate">
            <summary>
            Returns whether the client version (local) of the SDK is out of date.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.VerifyConfig">
            <summary>
            Verify whether the config was succesful based on whether the client is out of date.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.ComputeNextSendImpressionTime">
            <summary>
            Find the next time to send an impression. Randomise the standard rate by up to two seconds to avoid something else happening at the exact same time.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.SendImpressions(System.Byte[],System.UInt32)">
            <summary>
            Batch Send Impressions.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.SendSavedImpressions">
            <summary>
            Send all previously saved impressions. E.g. if the application was offline or it could not send impressions from the last session before closing.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.UpdateSending">
            <summary>
            Will send any queued impressions if possible and compute the next sending time.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.SetConfig(Adinmo.ServerConfig)">
            <summary>
            Allow the user to set the ServerConfig.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.ParseSettings(System.Byte[],System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            When handed a byte array, this is used for parsing game settings and other optional settings from the byte array.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoSender.DebugLog(System.String)">
            <summary>
            Records a log message on the server/local console
            </summary>
            <param name="message">Message to record</param>
        </member>
        <member name="M:Adinmo.AdinmoSender.DebugLogWarning(System.String)">
            <summary>
            Records a warning log message on the server/local console
            </summary>
            <param name="message">Message to record</param>
        </member>
        <member name="M:Adinmo.AdinmoSender.DebugLogError(System.String)">
            <summary>
            Records a error log message on the server/local console
            </summary>
            <param name="message">Message to record</param>
        </member>
        <member name="M:Adinmo.AdinmoSender.SubmitImpressions(System.Byte[],System.Boolean,System.UInt32)">
            <summary>
            Submit Impressions and Trackers for sending if online, otherwise save them for future sending.
            </summary>
            <param name="byteArray">The byte array to send</param>
            <param name="save">Whether this is to be cached</param>
            <param name="batchno">What batch number is the message</param>
        </member>
        <member name="P:Adinmo.AdinmoSender.isMuted">
            <summary>
            Used to test if an iOS device has the muted button on
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoVideoTexture">
            <summary>
            A wrapper for a video player texture to be used on a placement
            </summary>
        </member>
        <member name="P:Adinmo.AdinmoVideoTexture.IsPlaying">
            <summary>
            Is the video playing
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoVideoTexture.Dispose">
            <summary>
            function called when item needs to be safely disposed
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebRenderer.#ctor(Adinmo.PlacementImageConfig,System.Boolean)">
            <summary>
            An AdinmoWebTexture consists of many fields, most importantly access to the image data from the WebBitmapWrapper field
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebRenderer.#ctor(Adinmo.Placement,Adinmo.PlacementImageConfig)">
            <summary>
            An AdinmoWebTexture consists of many fields, most importantly access to the image data from the WebBitmapWrapper field
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebRenderer.SetupTexture(Adinmo.Placement,Adinmo.PlacementImageConfig,System.Boolean,System.Boolean)">
            <summary>
            Allocate the WebTexture a WebObject dependant on platform by calling native methods.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebRenderer.ProcessErrors">
            <summary>
            Used for making the Java errors in SetupWebObjects() human readable by passing them to the AdinmoSender.
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoWebTexture">
            <summary>
            Referenced in AdinmoWebTexture. 
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoWebTexture.UserAgent">
            <summary>
            User agent for this image
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Create a WebBitmapWrapper and allocate a bitmap to go along with it by calling native methods dependant on platform.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.Finalize">
            <summary>
            If the constructor is left empty, ensure there are no redundant objects and supress the error trace. 
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.Dispose">
            <summary>
            Disposing the key references for this item
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.ReleaseObjects(System.Boolean,System.Boolean)">
            <summary>
            If not already released, release WebBitmap via platform specific native methods. Non-Editor only.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.CheckTimedOut">
            <summary>
            Will return a true or false regarding in the download has timed out. It will also classify as a timeout if blank content has been loaded.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.Download(System.String)">
            <summary>
            Start the download using native methods with a 20 second timeout. Also update the download progress.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.UpdateDownload">
            <summary>
            Return whether the download has been updated.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.Update">
            <summary>
            Used for updating the frame count and checking to see if a downloaded ad is actually empty and handling that.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.StartDownload">
            <summary>
            Configure and start the download. This uses a platform-specific static method for Loading HTML / URLs.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.ProcessErrors">
            <summary>
            Used for making the Java errors human readable by passing them to the AdinmoSender.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoWebTexture.WebPageErrorReported(System.String)">
            <summary>
            If the webpage reports an error, report to AdinmoSender with the GUID and error.
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoUtilities">
            <summary>
            A utility class for commonly used methods
            </summary>
        </member>
        <member name="T:Adinmo.AdinmoUtilities.VolumeUnit">
            <summary>
            What unit is used for device volume
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoUtilities.VolumeUnit.Decibel">
            <summary>
            Perform volume action in decibels
            </summary>
        </member>
        <member name="F:Adinmo.AdinmoUtilities.VolumeUnit.Scalar">
            <summary>
            Perform volume action in scalar
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.GetSystemVolume(Adinmo.AdinmoUtilities.VolumeUnit)">
            <summary>
            An abstract method for returning current volumne of the device overriden in native windows library
            </summary>
            <param name="vUnit">The unit to return the volume in</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.GetTextureColourAverage(UnityEngine.Texture2D,System.Boolean)">
            <summary>
            The average colour of the texture will be returned.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.ManualFloatParser(System.String,System.String,System.Single)">
            <summary>
            returns a float from a string representation
            </summary>
            <param name="str">The string to parse</param>
            <param name="context">Context for error reporting</param>
            <param name="defaultValue">What to fall back to</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.GetShortGuid(System.String)">
            <summary>
            Returns a shortend version of the guid without the random element
            </summary>
            <param name="guid">The guid to truncate</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.CallNativeStaticMethod(System.String,System.Object[])">
            <summary>
            Calls a method in the native code library
            </summary>
            <param name="name">The name of the method</param>
            <param name="parameters">The array of parameters</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.CallInputStaticMethod(System.String,System.Object[])">
            <summary>
            Calls a method in the abstracted Input Handler
            </summary>
            <param name="name">The name of the method</param>
            <param name="parameters">The parameters to send</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.CallStoreStaticMethod(System.String,System.Object[])">
            <summary>
            Calls a method in the store wrapper
            </summary>
            <param name="name">The method to call</param>
            <param name="parameters">parameters to send with call</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.ToEngineeringNotation(System.Double)">
            <summary>
            Turns a double into Engineering notation
            </summary>
            <param name="d">Value to convert</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.IsPointerOverGameObject(UnityEngine.GameObject,UnityEngine.Vector2)">
            <summary>
            In image mode, work out if the point the player clicks has the game object underneath the touch point, 
            and is it covered by other objects not in the ignore layer or other adinmo objects
            </summary>
            <param name="gameObject">The game object to look for</param>
            <param name="position">the touch position to check</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.HtmlEncode(System.String)">
            <summary>
            Encodes a string into a escaped url format
            </summary>
            <param name="s">string to encode</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.UrlDecode(System.String)">
            <summary>
            Decodes a url into a non escaped string
            </summary>
            <param name="s">url to decode</param>
            <returns></returns>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.LogInfo(System.String,System.Boolean)">
            <summary>
            Will Info Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.LogVerbose(System.String,System.Boolean)">
            <summary>
            Will Verbose Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.LogDebug(System.String,System.Boolean)">
            <summary>
            Will Debug Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.LogWarning(System.String,System.Boolean)">
            <summary>
            Will Warning Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.LogError(System.String,System.Boolean)">
            <summary>
            Will Error Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="M:Adinmo.AdinmoUtilities.LogCritical(System.String,System.Boolean)">
            <summary>
            Will Critical Error Log if FeatureTracing or if FeatureSSTracing, add the log item to the Trace Buffer Queue.
            </summary>
        </member>
        <member name="F:Adinmo.AudioIconPlacementController.nextCycle">
            <summary>
            The latest time this image should cycle (if there hasn't been an impression)
            </summary>
        </member>
        <member name="F:Adinmo.AudioIconPlacementController.currentAudioConfig">
            <summary>
            the guid of the current Image that is showing on this placement
            </summary>
        </member>
        <member name="F:Adinmo.AudioIconPlacementController.pendingAudioConfig">
            <summary>
            the guid of the Image that was showing on this placement
            </summary>
        </member>
        <member name="M:Adinmo.AudioIconPlacementController.GetNewAudioData">
            <summary>
            Finds, if available, a new suitable image to display on this placement
            </summary>
            <returns>the placement image that was picked</returns>
        </member>
        <member name="T:Adinmo.Placement">
            <summary>
            The placement class which stores all the images that can be displayed on a placement image
            </summary>
        </member>
        <member name="M:Adinmo.Placement.#ctor(System.String,System.String,System.String,System.Single,System.String,Adinmo.Flatbufs.BackgroundSetting,Adinmo.Flatbufs.PlacementFit,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="placementKey">Placement key to use</param>
            <param name="placementKeyName">The name of the placement key according to the portal</param>
            <param name="aspectRatioString">A string representation of the aspect ratio</param>
            <param name="coolOffPeriod">The time after Impression before cycling</param>
            <param name="backgroundColourStr">The default letterbox colour</param>
            <param name="backgroundSet">How to handle letterboxing </param>
            <param name="placementFit">How tight to make the placement fit</param>
            <param name="enableAnimated">Enable animated ads</param>
        </member>
        <member name="M:Adinmo.Placement.#ctor(Adinmo.Flatbufs.PlacementInfoFB,System.Single)">
            <summary>
            Main constructor from GetGameSettings
            </summary>
            <param name="placementInfoFB">The flatbuf that contains all the image configs</param>
            <param name="initialMaxCycleInterval">The default maximum period between cycles</param>
        </member>
        <member name="F:Adinmo.Placement.key">
            <summary>
            The placement key (main identifier of a placement)
            </summary>
        </member>
        <member name="F:Adinmo.Placement.AspectRatioString">
            <summary>
            The aspect ratio of the placement
            </summary>
        </member>
        <member name="F:Adinmo.Placement.name">
            <summary>
            The name of the placement, set in the portal, for use on the debug manager
            </summary>
        </member>
        <member name="F:Adinmo.Placement.minNextCycle">
            <summary>
            The earliest time the placement should cycle, (after an impression)
            </summary>
        </member>
        <member name="F:Adinmo.Placement.nextCycle">
            <summary>
            The latest time this image should cycle (if there hasn't been an impression)
            </summary>
        </member>
        <member name="F:Adinmo.Placement.currentImageConfig">
            <summary>
            the guid of the current Image that is showing on this placement
            </summary>
        </member>
        <member name="F:Adinmo.Placement.pendingImageConfig">
            <summary>
            the guid of the Image that was showing on this placement
            </summary>
        </member>
        <member name="F:Adinmo.Placement.FitMatching">
            <summary>
            How tight to make the aspect ratio fit
            </summary>
        </member>
        <member name="F:Adinmo.Placement.backgroundSetting">
            <summary>
            How to handle letterboxing
            </summary>
        </member>
        <member name="F:Adinmo.Placement.backgroundColourString">
            <summary>
            The default colour for letterboxing
            </summary>
        </member>
        <member name="F:Adinmo.Placement.CoolingOffPeriod">
            <summary>
            Default time between impression and cycling
            </summary>
        </member>
        <member name="F:Adinmo.Placement.EnableAnimated">
            <summary>
            Allow animated Ads
            </summary>
        </member>
        <member name="F:Adinmo.Placement.mediaWeightings">
            <summary>
            A dictionary detailing additional weightings to apply to the various media types
            </summary>
        </member>
        <member name="F:Adinmo.Placement.Clickable">
            <summary>
            Whether this placement supports clicks
            </summary>
        </member>
        <member name="P:Adinmo.Placement.CoolOffPeriod">
            <summary>
            The default time between impression and cycle
            </summary>
        </member>
        <member name="P:Adinmo.Placement.MinNextCycle">
            <summary>
            Set for end of cooldown
            </summary>
        </member>
        <member name="P:Adinmo.Placement.Status">
            <summary>
            Get the status of this placement from the server.
            </summary>
        </member>
        <member name="P:Adinmo.Placement.CurrentImageConfig">
            <summary>
            The current image being rendered in the placement
            </summary>
        </member>
        <member name="M:Adinmo.Placement.SetStatus(Adinmo.Flatbufs.PlacementStatusFB)">
            <summary>
            Set the status of the placement.
            </summary>
        </member>
        <member name="M:Adinmo.Placement.GetNewImageData(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds, if available, a new suitable image to display on this placement
            </summary>
            <param name="allowWeb">Can it pick web textures</param>
            <param name="allowPriorityAds">Include Ads with weight>=1</param>
            <param name="setPending">Also set the pending flag immediately</param>
            <returns>the placement image that was picked</returns>
        </member>
        <member name="T:Adinmo.MediaProgressTracker">
            <summary>
            A class for storing trackers that trigger when a video or audio Ad has progressed so far
            </summary>
        </member>
        <member name="M:Adinmo.MediaProgressTracker.#ctor(System.String,System.String)">
            <summary>
            Constructor for a media progress tracker
            </summary>
            <param name="quartile">What quartile triggers the tracker</param>
            <param name="url">The url of the tracker</param>
        </member>
        <member name="F:Adinmo.MediaProgressTracker.QuartileFB">
            <summary>
            The progress state that triggers the tracker
            </summary>
        </member>
        <member name="F:Adinmo.MediaProgressTracker.URL">
            <summary>
            The url to call
            </summary>
        </member>
        <member name="T:Adinmo.GeneralEventTracker">
            <summary>
            A struct for storing a generic tracker
            </summary>
        </member>
        <member name="M:Adinmo.GeneralEventTracker.#ctor(System.String,System.String)">
            <summary>
            Constructor for the tracker
            </summary>
            <param name="eventType">What event triggers the tracker</param>
            <param name="eventUrl">The url of the tracker</param>
        </member>
        <member name="F:Adinmo.GeneralEventTracker.EventType">
            <summary>
            What event triggers the tracker
            </summary>
        </member>
        <member name="F:Adinmo.GeneralEventTracker.EventUrl">
            <summary>
            The tracker's URL
            </summary>
        </member>
        <member name="T:Adinmo.PlacementImageConfig">
            <summary>
            setup information for a placement image
            </summary>
        </member>
        <member name="M:Adinmo.PlacementImageConfig.#ctor(Adinmo.Flatbufs.PlacementImageFB)">
            <summary>
            constructor for non RTB Images (from GetGameSettings)
            </summary>
            <param name="placementImageFB">flatbuf representation of a placement image</param>
        </member>
        <member name="M:Adinmo.PlacementImageConfig.#ctor">
            <summary>
            A default constructor for a PlacementImageConfig
            </summary>
        </member>
        <member name="M:Adinmo.PlacementImageConfig.Available">
            <summary>
            Is this image available for use as an image(excludes existing image, images not downloaded and not overused
            </summary>
            <returns>if the image is available</returns>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.CampaignSource">
            <summary>
            The type of campaign
            </summary>
        </member>
        <member name="M:Adinmo.PlacementImageConfig.Invalid">
            <summary>
            has the image been seen too often
            </summary>
            <returns>if the image has been seen too often</returns>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.Guid">
            <summary>
            The guid unique to this image
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.Url">
            <summary>
            the url where to download the default image from
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.Campaign">
            <summary>
            The guid unique to this campaign
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.BidPrice">
            <summary>
            The value of the Ad
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.Provider">
            <summary>
            The exchange that sent the Ad
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.ExpiresAt">
            <summary>
            When the image will expire
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.TimeAddedToPool">
            <summary>
            The time this Ad was received
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.TimeFailed">
            <summary>
            Time that the Ad failed
            </summary>
        </member>
        <member name="P:Adinmo.PlacementImageConfig.LinkUrl">
            <summary>
            The url to follow when Ad is clicked
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.MaxViews">
            <summary>
            The maximum number of impressions before deletion, 0 imples no limit
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.numValidImpressions">
            <summary>
            For recording impressions on this placement
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.CustomTexts">
            <summary>
            Dictionary of text replacements for use on the magnifier button
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.RenderWidth">
            <summary>
            The width of the webview / video
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.RenderHeight">
            <summary>
            The height of the webview / video
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.IsAnimated">
            <summary>
            Is the webview animated
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.AspectRatio">
            <summary>
            The aspect ratio for this image
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.Html">
            <summary>
            The html for the webview
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.BaseItem">
            <summary>
            The core item that represents this object
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.Weight">
            <summary>
            Affects the chance that an image will be picked
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.MediaDurationMS">
            <summary>
            The duration that the Ad will play for
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.ProgressTrackers">
            <summary>
            List of potential progress trackers to trigger during video/audio playback
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.MagnifierProgressTrackers">
            <summary>
            List of potential progress trackers to trigger during video/audio playback on the magnifier
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.EventTrackers">
            <summary>
            List of potential trackers to trigger during events
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.MediaType">
            <summary>
            The type of media for the Ad
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.IapID">
            <summary>
            The ID of the IAP as defined in the IAP store
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.RequestID">
            <summary>
            The request ID of the Ad as provided by the backend
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.BidID">
            <summary>
            The bid ID of the Ad as provided by the backend
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.StoreUrl">
            <summary>
            The URL of the advertiser as provided by the backend
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.AdvertiserDomain">
            <summary>
            The domain of the advertiser as provided by the backend
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.RenderBorderType">
            <summary>
            What type of border to use to indicate clickability
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.RenderBorderCycleMode">
            <summary>
            How to cycle the border to indicate clickability
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.PlacementClickResponse">
            <summary>
            Any feedback to the user when an Ad is clicked
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.PlacementClickHandler">
            <summary>
            What happens when the click is processed
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.PlacementClickMechanic">
            <summary>
            What triggers a 'click'
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.BorderHue">
            <summary>
            What colour override to apply to the glow border
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.BorderSaturation">
            <summary>
            What saturation override to apply to the glow border
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.UsesMagnifier">
            <summary>
            Whether to use a magnifier
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.MinAudioSkipTime">
            <summary>
            The minimum period to play an audio Ad before the skip option appears
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.PercentageAudioSkipTime">
            <summary>
            The minimum percentage of an audio Ad to play before the skip option appears
            </summary>
        </member>
        <member name="P:Adinmo.PlacementImageConfig.Downloaded">
            <summary>
            Whether the image has been downloaded yet
            </summary>
        </member>
        <member name="P:Adinmo.PlacementImageConfig.DownloadFailed">
            <summary>
            Whether the image download failed
            </summary>
        </member>
        <member name="P:Adinmo.PlacementImageConfig.Downloading">
            <summary>
            Whether the image download is still in progress
            </summary>
        </member>
        <member name="P:Adinmo.PlacementImageConfig.DownloadProgress">
            <summary>
            The status of the download task
            </summary>
        </member>
        <member name="M:Adinmo.PlacementImageConfig.UpdateDownload">
            <summary>
            Runs the update process for the image download task
            </summary>
            <returns>Whether the download task has finished</returns>
        </member>
        <member name="P:Adinmo.PlacementImageConfig.InUse">
            <summary>
            Whether the image is currently assigned to a placement
            </summary>
        </member>
        <member name="P:Adinmo.PlacementImageConfig.IsWebView">
            <summary>
            Whether the Ad is a webview
            </summary>
        </member>
        <member name="F:Adinmo.PlacementImageConfig.IsRTB">
            <summary>
            Whether the Ad is RTB
            </summary>
        </member>
        <member name="M:Adinmo.PlacementImageConfig.ToString">
            <summary>
            displays a string summary of the PlacementImageConfig
            </summary>
            <returns></returns>
        </member>
        <member name="M:Adinmo.PlacementImageConfig.AddProgressTracker(Adinmo.MediaProgressTracker)">
            <summary>
            Add a progress tracker to the image
            </summary>
            <param name="progressTracker"></param>
        </member>
        <member name="T:Adinmo.VastTagParser">
            <summary>
            A class for parsing a Vast tag into a PlacementImageConfig
            </summary>
        </member>
        <member name="F:Adinmo.VastTagParser.started">
            <summary>
            How many Vast Tag Parsings have started
            </summary>
        </member>
        <member name="F:Adinmo.VastTagParser.failed">
            <summary>
            How many Vast Tag Parsings have failed
            </summary>
        </member>
        <member name="F:Adinmo.VastTagParser.succeeded">
            <summary>
            How many Vast Tag Parsings have succeeded
            </summary>
        </member>
        <member name="F:Adinmo.VastTagParser.emptyWrappers">
            <summary>
            How many Vast Tag Parsings never went anywhere
            </summary>
        </member>
        <member name="F:Adinmo.VastTagParser.badSize">
            <summary>
            How many Vast Tag Parsings reported an unsuitable size
            </summary>
        </member>
        <member name="F:Adinmo.VastTagParser.finished">
            <summary>
            Has the parsing finished
            </summary>
        </member>
        <member name="M:Adinmo.VastTagParser.Setup(Adinmo.PlacementImageConfig,System.String)">
            <summary>
            setup a new parsing attempt
            </summary>
            <param name="imageConfig">The image config to work from</param>
            <param name="filename">A VastTag in a file</param>
        </member>
        <member name="T:Google.FlatBuffers.Options">
            <summary>
            The Class of the Verifier Options
            </summary>
        </member>
        <member name="P:Google.FlatBuffers.Options.MaxDepth">
            <summary> Maximum depth of nested tables allowed in a valid flatbuffer. </summary>
        </member>
        <member name="P:Google.FlatBuffers.Options.MaxTables">
            <summary> Maximum number of tables allowed in a valid flatbuffer. </summary>
        </member>
        <member name="P:Google.FlatBuffers.Options.stringEndCheck">
            <summary> Check that string contains its null terminator </summary>
        </member>
        <member name="P:Google.FlatBuffers.Options.AlignmentCheck">
            <summary> Check alignment of elements </summary>
        </member>
        <member name="T:Google.FlatBuffers.Verifier">
            <summary>
            The Main Class of the FlatBuffer Verifier
            </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.#ctor">
            <summary> The Base Constructor of the Verifier object </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.#ctor(Google.FlatBuffers.ByteBuffer,Google.FlatBuffers.Options)">
            <summary> The Constructor of the Verifier object with input parameters: ByteBuffer and/or Options </summary>
            <param name="buf"> Input flat byte buffer defined as ByteBuffer type</param>
            <param name="options"> Options object with settings for the coniguration the Verifier </param>
        </member>
        <member name="P:Google.FlatBuffers.Verifier.Buf">
            <summary> Bytes Buffer for Verify</summary>
        </member>
        <member name="P:Google.FlatBuffers.Verifier.options">
            <summary> Options of the Verifier </summary>
        </member>
        <member name="P:Google.FlatBuffers.Verifier.Depth">
            <summary> Counter of tables depth in a tested flatbuffer  </summary>
        </member>
        <member name="P:Google.FlatBuffers.Verifier.NumTables">
            <summary> Counter of tables in a tested flatbuffer </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.SetMaxDepth(System.Int32)">
            <summary> Method set maximum tables depth of valid structure</summary>
            <param name="value"> Specify Value of the maximum depth of the structure</param>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.SetMaxTables(System.Int32)">
            <summary> Specify maximum number of tables in structure </summary>
            <param name="value"> Specify Value of the maximum number of the tables in the structure</param>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.SetAlignmentCheck(System.Boolean)">
            <summary> Enable/disable buffer content alignment check </summary>
            <param name="value"> Value of the State for buffer content alignment check (Enable = true) </param>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.SetStringCheck(System.Boolean)">
            <summary> Enable/disable checking of string termination '0' character </summary>
            <param name="value"> Value of the option for string termination '0' character check (Enable = true)</param>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.BufferHasIdentifier(Google.FlatBuffers.ByteBuffer,System.UInt32,System.String)">
            <summary> Check if there is identifier in buffer </summary>
            <param name="buf"> Input flat byte buffer defined as ByteBuffer type </param>
            <param name="startPos">Start position of data in the Byte Buffer</param>
            <param name="identifier"> Identifier for the Byte Buffer</param>
            <returns> Return True when the Byte Buffer Identifier is present</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.ReadUOffsetT(Google.FlatBuffers.ByteBuffer,System.UInt32)">
            <summary> Get UOffsetT from buffer at given position - it must be verified before read </summary>
            <param name="buf"> Input flat byte buffer defined as ByteBuffer type </param>
            <param name="pos"> Position of data in the Byte Buffer</param>
            <returns> Return the UOffset Value (Unsigned Integer type - 4 bytes) in pos </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.ReadSOffsetT(Google.FlatBuffers.ByteBuffer,System.Int32)">
            <summary> Get SOffsetT from buffer at given position - it must be verified before read </summary>
            <param name="buf"> Input flat byte buffer defined as ByteBuffer type </param>
            <param name="pos"> Position of data in the Byte Buffer</param>
            <returns> Return the SOffset Value (Signed Integer type - 4 bytes) in pos </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.ReadVOffsetT(Google.FlatBuffers.ByteBuffer,System.Int32)">
            <summary> Get VOffsetT from buffer at given position - it must be verified before read </summary>
            <param name="buf"> Input flat byte buffer defined as ByteBuffer type </param>
            <param name="pos"> Position of data in the Byte Buffer</param>
            <returns> Return the VOffset Value (Short type - 2 bytes) in pos </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.GetVRelOffset(System.Int32,System.Int16)">
            <summary> Get table data area relative offset from vtable. Result is relative to table start
                      Fields which are deprecated are ignored by checking against the vtable's length. </summary>
            <param name="pos"> Position of data in the Byte Buffer </param>
            <param name="vtableOffset"> offset of value in the Table</param>
            <returns> Return the relative VOffset Value (Short type - 2 bytes) in calculated offset </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.GetVOffset(System.UInt32,System.Int16)">
            <summary> Get table data area absolute offset from vtable. Result is the absolute buffer offset.
            The result value offset cannot be '0' (pointing to itself) so after validation this method returnes '0'
            value as a marker for missing optional entry </summary>
            <param name="tablePos"> Table Position value in the Byte Buffer </param>
            <param name="vtableOffset"> offset value in the Table</param>
            <returns> Return the absolute UOffset Value </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckComplexity">
            <summary> Check flatbuffer complexity (tables depth, elements counter and so on) </summary>
            <returns> If complexity is too high function returns false as verification error </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckAlignment(System.UInt32,System.UInt64)">
            <summary> Check alignment of element. </summary>
            <returns> Return True when alignment of the element is correct</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckElement(System.UInt32,System.UInt64)">
            <summary> Check if element is valid in buffer area. </summary> 
            <param name="pos"> Value defines the offset/position to element</param>
            <param name="elementSize"> Size of element</param>
            <returns> Return True when Element is correct </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckScalar(System.UInt32,System.UInt64)">
            <summary> Check if element is a valid scalar. </summary>
            <param name="pos"> Value defines the offset to scalar</param>
            <param name="elementSize"> Size of element</param>
            <returns> Return True when Scalar Element is correct </returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckOffset(System.UInt32)">
            <summary> Check offset. It is a scalar with size of UOffsetT. </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckString(System.UInt32)">
            <summary>Verify a string at given position.</summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckVector(System.UInt32,System.UInt64)">
            <summary> Verify the vector of elements of given size </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckTable(System.UInt32,Google.FlatBuffers.VerifyTableAction)">
            <summary> Verify table content using structure dependent generated function </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckStringFunc(Google.FlatBuffers.Verifier,System.UInt32)">
            <summary> String check wrapper function to be used in vector of strings check </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckVectorOfObjects(System.UInt32,Google.FlatBuffers.VerifyTableAction)">
            <summary> Check vector of objects. Use generated object verification function </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckIndirectOffset(System.UInt32)">
            <summary> Check if the offset referenced by offsetPos is the valid offset pointing to buffer</summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.CheckBufferFromStart(System.String,System.UInt32,Google.FlatBuffers.VerifyTableAction)">
            <summary> Check flatbuffer content using generated object verification function </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.GetIndirectOffset(System.UInt32)">
            <summary> Get indirect offset. It is an offset referenced by offset Pos </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyTableStart(System.UInt32)">
            <summary> Verify beginning of table </summary>
            <param name="tablePos"> Position in the Table </param>
            <returns> Return True when the verification of the beginning of the table is passed</returns> 
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyTableEnd(System.UInt32)">
            <summary> Verify end of table. In practice, this function does not check buffer but handles
            verification statistics update </summary>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyField(System.UInt32,System.Int16,System.UInt64,System.UInt64,System.Boolean)">
            <summary> Verifiy static/inlined data area field </summary>
            <param name="tablePos"> Position in the Table</param>
            <param name="offsetId"> Offset to the static/inlined data element </param>
            <param name="elementSize"> Size of the element </param>
            <param name="align"> Alignment bool value </param>
            <param name="required"> Required Value when the offset == 0 </param>
            <returns>Return True when the verification of the static/inlined data element is passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyString(System.UInt32,System.Int16,System.Boolean)">
            <summary> Verify string </summary> 
            <param name="tablePos"> Position in the Table</param>
            <param name="vOffset"> Offset to the String element </param>
            <param name="required"> Required Value when the offset == 0 </param>
            <returns>Return True when the verification of the String is passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyVectorOfData(System.UInt32,System.Int16,System.UInt64,System.Boolean)">
            <summary> Verify vector of fixed size structures and scalars </summary>
            <param name="tablePos"> Position in the Table</param>
            <param name="vOffset"> Offset to the Vector of Data </param>
            <param name="elementSize"> Size of the element</param>
            <param name="required"> Required Value when the offset == 0 </param>
            <returns>Return True when the verification of the Vector of Data passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyVectorOfStrings(System.UInt32,System.Int16,System.Boolean)">
            <summary> Verify array of strings </summary>
            <param name="tablePos"> Position in the Table</param>
            <param name="offsetId"> Offset to the Vector of String </param>
            <param name="required"> Required Value when the offset == 0 </param>
            <returns>Return True when the verification of the Vector of String passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyVectorOfTables(System.UInt32,System.Int16,Google.FlatBuffers.VerifyTableAction,System.Boolean)">
            <summary> Verify vector of tables (objects). Tables are verified using generated verifyObjFunc </summary>
            <param name="tablePos"> Position in the Table</param>
            <param name="offsetId"> Offset to the Vector of Table </param>
            <param name="verifyAction"> Method used to the verification Table </param>
            <param name="required"> Required Value when the offset == 0 </param>
            <returns>Return True when the verification of the Vector of Table passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyTable(System.UInt32,System.Int16,Google.FlatBuffers.VerifyTableAction,System.Boolean)">
            <summary> Verify table object using generated verification function. </summary>
            <param name="tablePos"> Position in the Table</param>
            <param name="offsetId"> Offset to the Table </param>
            <param name="verifyAction"> Method used to the verification Table </param>
            <param name="required"> Required Value when the offset == 0 </param>
            <returns>Return True when the verification of the Table passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyNestedBuffer(System.UInt32,System.Int16,Google.FlatBuffers.VerifyTableAction,System.Boolean)">
            <summary> Verify nested buffer object. When verifyObjFunc is provided, it is used to verify object structure. </summary>
            <param name="tablePos"> Position in the Table </param>
            <param name="offsetId"> Offset to the Table </param>
            <param name="verifyAction">  Method used to the verification Table </param>
            <param name="required"> Required Value when the offset == 0  </param>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyUnionData(System.UInt32,System.UInt64,System.UInt64)">
            <summary> Verifiy static/inlined data area at absolute offset </summary>
            <param name="pos"> Position of static/inlined data area in the Byte Buffer</param>
            <param name="elementSize"> Size of the union data</param>
            <param name="align"> Alignment bool value </param>
            <returns>Return True when the verification of the Union Data is passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyUnionString(System.UInt32)">
            <summary> Verify string referenced by absolute offset value </summary>
            <param name="pos"> Position of Union String in the Byte Buffer</param>
            <returns>Return True when the verification of the Union String is passed</returns> 
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyUnion(System.UInt32,System.Int16,System.Int16,Google.FlatBuffers.VerifyUnionAction,System.Boolean)">
            <summary> Method verifies union object using generated verification function </summary>
            <param name="tablePos"> Position in the Table</param>
            <param name="typeIdVOffset"> Offset in the Table</param>
            <param name="valueVOffset"> Offset to Element</param>
            <param name="verifyAction"> Verification Method used for Union</param>
            <param name="required"> Required Value when the offset == 0 </param>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyVectorOfUnion(System.UInt32,System.Int16,System.Int16,Google.FlatBuffers.VerifyUnionAction,System.Boolean)">
            <summary> Verify vector of unions (objects). Unions are verified using generated verifyObjFunc </summary>
            <param name="tablePos"> Position of the Table</param>
            <param name="typeOffsetId"> Offset in the Table (Union type id)</param>
            <param name="offsetId"> Offset to vector of Data Stucture offset</param>
            <param name="verifyAction"> Verification Method used for Union</param>
            <param name="required"> Required Value when the offset == 0 </param>
            <returns>Return True when the verification of the Vector of Unions passed</returns>
        </member>
        <member name="M:Google.FlatBuffers.Verifier.VerifyBuffer(System.String,System.Boolean,Google.FlatBuffers.VerifyTableAction)">
            <summary> Method verifies flatbuffer data using generated Table verification function </summary>
            
            <param name="identifier"> The expected identifier of buffer data</param>
            <param name="sizePrefixed"> Flag should be true when buffer is prefixed with content size</param>
            <param name="verifyAction"> Function to be used for verification. This function is generated by compiler and included in each table definition file</param>
            <returns> Return True when verification of FlatBuffer passed</returns>
            <example>
            Example 1. Verify Monster table. Ignore buffer name and assume buffer does not contain data length prefix 
            <code>  isValid = verifier.VerifyBuffer(bb, false, MonsterVerify)</code>
            Example 2. Verify Monster table. Buffer name is 'MONS' and contains data length prefix 
            <code>  isValid = verifier.VerifyBuffer("MONS", true, MonsterVerify)</code>
            </example>
        </member>
        <member name="T:Google.FlatBuffers.ByteBuffer">
            <summary>
            Class to mimic Java's ByteBuffer which is used heavily in Flatbuffers.
            </summary>
        </member>
        <member name="F:Google.FlatBuffers.ByteBuffer.genericSizes">
            <summary>
            A lookup of type sizes. Used instead of Marshal.SizeOf() which has additional
            overhead, but also is compatible with generic functions for simplified code.
            </summary>
        </member>
        <member name="M:Google.FlatBuffers.ByteBuffer.SizeOf``1">
            <summary>
            Get the wire-size (in bytes) of a type supported by flatbuffers.
            </summary>
            <typeparam name="T">The type to get the wire size of</typeparam>
            <returns></returns>
        </member>
        <member name="M:Google.FlatBuffers.ByteBuffer.IsSupportedType``1">
            <summary>
            Checks if the Type provided is supported as scalar value
            </summary>
            <typeparam name="T">The Type to check</typeparam>
            <returns>True if the type is a scalar type that is supported, falsed otherwise</returns>
        </member>
        <member name="M:Google.FlatBuffers.ByteBuffer.ArraySize``1(``0[])">
            <summary>
            Get the wire-size (in bytes) of an typed array
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="x">The array to get the size of</param>
            <returns>The number of bytes the array takes on wire</returns>
        </member>
        <member name="M:Google.FlatBuffers.ByteBuffer.ArraySize``1(System.ArraySegment{``0})">
            <summary>
            Get the wire-size (in bytes) of an typed array segment, taking only the
            range specified by <paramref name="x"/> into account.
            </summary>
            <typeparam name="T">The type of the array</typeparam>
            <param name="x">The array segment to get the size of</param>
            <returns>The number of bytes the array segment takes on wire</returns>
        </member>
        <member name="M:Google.FlatBuffers.ByteBuffer.Put``1(System.Int32,``0[])">
            <summary>
            Copies an array of type T into this buffer, ending at the given
            offset into this buffer. The starting offset is calculated based on the length
            of the array and is the value returned.
            </summary>
            <typeparam name="T">The type of the input data (must be a struct)</typeparam>
            <param name="offset">The offset into this buffer where the copy will end</param>
            <param name="x">The array to copy data from</param>
            <returns>The 'start' location of this buffer now, after the copy completed</returns>
        </member>
        <member name="M:Google.FlatBuffers.ByteBuffer.Put``1(System.Int32,System.ArraySegment{``0})">
            <summary>
            Copies an array segment of type T into this buffer, ending at the 
            given offset into this buffer. The starting offset is calculated 
            based on the count of the array segment and is the value returned.
            </summary>
            <typeparam name="T">The type of the input data (must be a struct)
            </typeparam>
            <param name="offset">The offset into this buffer where the copy 
            will end</param>
            <param name="x">The array segment to copy data from</param>
            <returns>The 'start' location of this buffer now, after the copy 
            completed</returns>
        </member>
        <member name="M:Google.FlatBuffers.ByteBuffer.Put``1(System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Copies an array segment of type T into this buffer, ending at the 
            given offset into this buffer. The starting offset is calculated 
            based on the count of the array segment and is the value returned.
            </summary>
            <typeparam name="T">The type of the input data (must be a struct)
            </typeparam>
            <param name="offset">The offset into this buffer where the copy 
            will end</param>
            <param name="ptr">The pointer to copy data from</param>
            <param name="sizeInBytes">The number of bytes to copy</param>
            <returns>The 'start' location of this buffer now, after the copy 
            completed</returns>
        </member>
        <member name="T:Google.FlatBuffers.ByteBufferUtil">
            <summary>
            Class that collects utility functions around `ByteBuffer`.
            </summary>
        </member>
        <member name="T:Google.FlatBuffers.FlatBufferBuilder">
            <summary>
            Responsible for building up and accessing a FlatBuffer formatted byte
            array (via ByteBuffer).
            </summary>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.#ctor(System.Int32)">
            <summary>
            Create a FlatBufferBuilder with a given initial size.
            </summary>
            <param name="initialSize">
            The initial size to use for the internal buffer.
            </param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.#ctor(Google.FlatBuffers.ByteBuffer)">
            <summary>
            Create a FlatBufferBuilder backed by the pased in ByteBuffer
            </summary>
            <param name="buffer">The ByteBuffer to write to</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Clear">
            <summary>
            Reset the FlatBufferBuilder by purging all data that it holds.
            </summary>
        </member>
        <member name="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults">
             <summary>
             Gets and sets a Boolean to disable the optimization when serializing
             default values to a Table.
            
             In order to save space, fields that are set to their default value
             don't get serialized into the buffer.
             </summary>
        </member>
        <member name="P:Google.FlatBuffers.FlatBufferBuilder.Offset">
            @cond FLATBUFFERS_INTERNAL
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Put``1(``0[])">
            <summary>
            Puts an array of type T into this builder at the
            current offset
            </summary>
            <typeparam name="T">The type of the input data </typeparam>
            <param name="x">The array to copy data from</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Put``1(System.ArraySegment{``0})">
            <summary>
            Puts an array of type T into this builder at the
            current offset
            </summary>
            <typeparam name="T">The type of the input data </typeparam>
            <param name="x">The array segment to copy data from</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Put``1(System.IntPtr,System.Int32)">
            <summary>
            Puts data of type T into this builder at the
            current offset
            </summary>
            <typeparam name="T">The type of the input data </typeparam>
            <param name="ptr">The pointer to copy data from</param>
            <param name="sizeInBytes">The length of the data in bytes</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddBool(System.Boolean)">
            @endcond
            <summary>
            Add a `bool` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `bool` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddSbyte(System.SByte)">
            <summary>
            Add a `sbyte` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `sbyte` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddByte(System.Byte)">
            <summary>
            Add a `byte` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `byte` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddShort(System.Int16)">
            <summary>
            Add a `short` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `short` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUshort(System.UInt16)">
            <summary>
            Add an `ushort` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `ushort` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddInt(System.Int32)">
            <summary>
            Add an `int` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `int` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUint(System.UInt32)">
            <summary>
            Add an `uint` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `uint` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddLong(System.Int64)">
            <summary>
            Add a `long` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `long` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUlong(System.UInt64)">
            <summary>
            Add an `ulong` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `ulong` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddFloat(System.Single)">
            <summary>
            Add a `float` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `float` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Add``1(``0[])">
            <summary>
            Add an array of type T to the buffer (aligns the data and grows if necessary).
            </summary>
            <typeparam name="T">The type of the input data</typeparam>
            <param name="x">The array to copy data from</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Add``1(System.ArraySegment{``0})">
            <summary>
            Add an array of type T to the buffer (aligns the data and grows if necessary).
            </summary>
            <typeparam name="T">The type of the input data</typeparam>
            <param name="x">The array segment to copy data from</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Add``1(System.IntPtr,System.Int32)">
            <summary>
            Adds the data of type T pointed to by the given pointer to the buffer (aligns the data and grows if necessary).
            </summary>
            <typeparam name="T">The type of the input data</typeparam>
            <param name="ptr">The pointer to copy data from</param>
            <param name="sizeInBytes">The data size in bytes</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddDouble(System.Double)">
            <summary>
            Add a `double` to the buffer (aligns the data and grows if necessary).
            </summary>
            <param name="x">The `double` to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddOffset(System.Int32)">
            <summary>
            Adds an offset, relative to where it will be written.
            </summary>
            <param name="off">The offset to add to the buffer.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.StartVector(System.Int32,System.Int32,System.Int32)">
            @cond FLATBUFFERS_INTERNAL
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.EndVector">
            @endcond
            <summary>
            Writes data necessary to finish a vector construction.
            </summary>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.CreateVectorOfTables``1(Google.FlatBuffers.Offset{``0}[])">
            <summary>
            Creates a vector of tables.
            </summary>
            <param name="offsets">Offsets of the tables.</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Nested(System.Int32)">
            @cond FLATBUFFERS_INTENRAL
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddBool(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Adds a Boolean to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddBool(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Adds a Boolean to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable boolean value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>       
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddSbyte(System.Int32,System.SByte,System.SByte)">
            <summary>
            Adds a SByte to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddSbyte(System.Int32,System.Nullable{System.SByte})">
            <summary>
            Adds a SByte to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable sbyte value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddByte(System.Int32,System.Byte,System.Byte)">
            <summary>
            Adds a Byte to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddByte(System.Int32,System.Nullable{System.Byte})">
            <summary>
            Adds a Byte to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable byte value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddShort(System.Int32,System.Int16,System.Int32)">
            <summary>
            Adds a Int16 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddShort(System.Int32,System.Nullable{System.Int16})">
            <summary>
            Adds a Int16 to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable int16 value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUshort(System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Adds a UInt16 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUshort(System.Int32,System.Nullable{System.UInt16})">
            <summary>
            Adds a Uint16 to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable uint16 value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an Int32 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddInt(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Adds a Int32 to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable int32 value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUint(System.Int32,System.UInt32,System.UInt32)">
            <summary>
            Adds a UInt32 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUint(System.Int32,System.Nullable{System.UInt32})">
            <summary>
            Adds a UInt32 to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable uint32 value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddLong(System.Int32,System.Int64,System.Int64)">
            <summary>
            Adds an Int64 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddLong(System.Int32,System.Nullable{System.Int64})">
            <summary>
            Adds a Int64 to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable int64 value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUlong(System.Int32,System.UInt64,System.UInt64)">
            <summary>
            Adds a UInt64 to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddUlong(System.Int32,System.Nullable{System.UInt64})">
            <summary>
            Adds a UInt64 to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable int64 value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddFloat(System.Int32,System.Single,System.Double)">
            <summary>
            Adds a Single to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddFloat(System.Int32,System.Nullable{System.Single})">
            <summary>
            Adds a Single to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable single value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddDouble(System.Int32,System.Double,System.Double)">
            <summary>
            Adds a Double to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            and <see cref="P:Google.FlatBuffers.FlatBufferBuilder.ForceDefaults"/> is false, the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddDouble(System.Int32,System.Nullable{System.Double})">
            <summary>
            Adds a Double to the Table at index `o` in its vtable using the nullable value `x`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The nullable double value to put into the buffer. If it doesn't have a value
            it will skip writing to the buffer.</param>  
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddOffset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a buffer offset to the Table at index `o` in its vtable using the value `x` and default `d`
            </summary>
            <param name="o">The index into the vtable</param>
            <param name="x">The value to put into the buffer. If the value is equal to the default
            the value will be skipped.</param>
            <param name="d">The default value to compare the value against</param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.CreateString(System.String)">
            @endcond
            <summary>
            Encode the string `s` in the buffer using UTF-8.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>
            The offset in the buffer where the encoded string starts.
            </returns>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.CreateSharedString(System.String)">
            <summary>
            Store a string in the buffer, which can contain any binary data.
            If a string with this exact contents has already been serialized before,
            instead simply returns the offset of the existing string.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>
            The offset in the buffer where the encoded string starts.
            </returns>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.AddStruct(System.Int32,System.Int32,System.Int32)">
            @cond FLATBUFFERS_INTERNAL
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Finish(System.Int32,System.Boolean)">
            @endcond
            <summary>
            Finalize a buffer, pointing to the given `root_table`.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
            <param name="sizePrefix">
            Whether to prefix the size to the buffer.
            </param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Finish(System.Int32)">
            <summary>
            Finalize a buffer, pointing to the given `root_table`.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.FinishSizePrefixed(System.Int32)">
            <summary>
            Finalize a buffer, pointing to the given `root_table`, with the size prefixed.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
        </member>
        <member name="P:Google.FlatBuffers.FlatBufferBuilder.DataBuffer">
            <summary>
            Get the ByteBuffer representing the FlatBuffer.
            </summary>
            <remarks>
            This is typically only called after you call `Finish()`.
            The actual data starts at the ByteBuffer's current position,
            not necessarily at `0`.
            </remarks>
            <returns>
            Returns the ByteBuffer for this FlatBuffer.
            </returns>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.SizedByteArray">
            <summary>
            A utility function to copy and return the ByteBuffer data as a
            `byte[]`.
            </summary>
            <returns>
            A full copy of the FlatBuffer data.
            </returns>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Finish(System.Int32,System.String,System.Boolean)">
            <summary>
            Finalize a buffer, pointing to the given `rootTable`.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
            <param name="fileIdentifier">
            A FlatBuffer file identifier to be added to the buffer before
            `root_table`.
            </param>
            <param name="sizePrefix">
            Whether to prefix the size to the buffer.
            </param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.Finish(System.Int32,System.String)">
            <summary>
            Finalize a buffer, pointing to the given `rootTable`.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
            <param name="fileIdentifier">
            A FlatBuffer file identifier to be added to the buffer before
            `root_table`.
            </param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferBuilder.FinishSizePrefixed(System.Int32,System.String)">
            <summary>
            Finalize a buffer, pointing to the given `rootTable`, with the size prefixed.
            </summary>
            <param name="rootTable">
            An offset to be added to the buffer.
            </param>
            <param name="fileIdentifier">
            A FlatBuffer file identifier to be added to the buffer before
            `root_table`.
            </param>
        </member>
        <member name="M:Google.FlatBuffers.FlatBufferConstants.FLATBUFFERS_23_5_26">
            A version identifier to force a compile error if someone
                    accidentally tries to build generated code with a runtime of
                    two mismatched version. Versions need to always match, as
                    the runtime and generated code are modified in sync.
                    Changes to the C# implementation need to be sure to change
                    the version here and in the code generator on every possible
                    incompatible change 
        </member>
        <member name="T:Google.FlatBuffers.IFlatbufferObject">
            <summary>
            This is the base for both structs and tables.
            </summary>
        </member>
        <member name="T:Google.FlatBuffers.Offset`1">
            <summary>
            Offset class for typesafe assignments.
            </summary>
        </member>
        <member name="T:Google.FlatBuffers.Struct">
            <summary>
            All structs in the generated code derive from this class, and add their own accessors.
            </summary>
        </member>
        <member name="T:Google.FlatBuffers.Table">
            <summary>
            All tables in the generated code derive from this struct, and add their own accessors.
            </summary>
        </member>
    </members>
</doc>
